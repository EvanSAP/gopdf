// Code generated by go-swagger; DO NOT EDIT.

package save_cart

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// SaveCartUsingPATCHReader is a Reader for the SaveCartUsingPATCH structure.
type SaveCartUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SaveCartUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSaveCartUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewSaveCartUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewSaveCartUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSaveCartUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSaveCartUsingPATCHOK creates a SaveCartUsingPATCHOK with default headers values
func NewSaveCartUsingPATCHOK() *SaveCartUsingPATCHOK {
	return &SaveCartUsingPATCHOK{}
}

/*SaveCartUsingPATCHOK handles this case with default header values.

OK
*/
type SaveCartUsingPATCHOK struct {
	Payload *models.SaveCartResultWsDTO
}

func (o *SaveCartUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}/carts/{cartId}/save][%d] saveCartUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *SaveCartUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SaveCartResultWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveCartUsingPATCHNoContent creates a SaveCartUsingPATCHNoContent with default headers values
func NewSaveCartUsingPATCHNoContent() *SaveCartUsingPATCHNoContent {
	return &SaveCartUsingPATCHNoContent{}
}

/*SaveCartUsingPATCHNoContent handles this case with default header values.

No Content
*/
type SaveCartUsingPATCHNoContent struct {
}

func (o *SaveCartUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}/carts/{cartId}/save][%d] saveCartUsingPATCHNoContent ", 204)
}

func (o *SaveCartUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSaveCartUsingPATCHUnauthorized creates a SaveCartUsingPATCHUnauthorized with default headers values
func NewSaveCartUsingPATCHUnauthorized() *SaveCartUsingPATCHUnauthorized {
	return &SaveCartUsingPATCHUnauthorized{}
}

/*SaveCartUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type SaveCartUsingPATCHUnauthorized struct {
}

func (o *SaveCartUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}/carts/{cartId}/save][%d] saveCartUsingPATCHUnauthorized ", 401)
}

func (o *SaveCartUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSaveCartUsingPATCHForbidden creates a SaveCartUsingPATCHForbidden with default headers values
func NewSaveCartUsingPATCHForbidden() *SaveCartUsingPATCHForbidden {
	return &SaveCartUsingPATCHForbidden{}
}

/*SaveCartUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type SaveCartUsingPATCHForbidden struct {
}

func (o *SaveCartUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}/carts/{cartId}/save][%d] saveCartUsingPATCHForbidden ", 403)
}

func (o *SaveCartUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
