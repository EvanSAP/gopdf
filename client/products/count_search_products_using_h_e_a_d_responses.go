// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// CountSearchProductsUsingHEADReader is a Reader for the CountSearchProductsUsingHEAD structure.
type CountSearchProductsUsingHEADReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CountSearchProductsUsingHEADReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCountSearchProductsUsingHEADOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewCountSearchProductsUsingHEADNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCountSearchProductsUsingHEADUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCountSearchProductsUsingHEADForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCountSearchProductsUsingHEADOK creates a CountSearchProductsUsingHEADOK with default headers values
func NewCountSearchProductsUsingHEADOK() *CountSearchProductsUsingHEADOK {
	return &CountSearchProductsUsingHEADOK{}
}

/*CountSearchProductsUsingHEADOK handles this case with default header values.

OK
*/
type CountSearchProductsUsingHEADOK struct {
}

func (o *CountSearchProductsUsingHEADOK) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/products/search][%d] countSearchProductsUsingHEADOK ", 200)
}

func (o *CountSearchProductsUsingHEADOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCountSearchProductsUsingHEADNoContent creates a CountSearchProductsUsingHEADNoContent with default headers values
func NewCountSearchProductsUsingHEADNoContent() *CountSearchProductsUsingHEADNoContent {
	return &CountSearchProductsUsingHEADNoContent{}
}

/*CountSearchProductsUsingHEADNoContent handles this case with default header values.

No Content
*/
type CountSearchProductsUsingHEADNoContent struct {
}

func (o *CountSearchProductsUsingHEADNoContent) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/products/search][%d] countSearchProductsUsingHEADNoContent ", 204)
}

func (o *CountSearchProductsUsingHEADNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCountSearchProductsUsingHEADUnauthorized creates a CountSearchProductsUsingHEADUnauthorized with default headers values
func NewCountSearchProductsUsingHEADUnauthorized() *CountSearchProductsUsingHEADUnauthorized {
	return &CountSearchProductsUsingHEADUnauthorized{}
}

/*CountSearchProductsUsingHEADUnauthorized handles this case with default header values.

Unauthorized
*/
type CountSearchProductsUsingHEADUnauthorized struct {
}

func (o *CountSearchProductsUsingHEADUnauthorized) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/products/search][%d] countSearchProductsUsingHEADUnauthorized ", 401)
}

func (o *CountSearchProductsUsingHEADUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCountSearchProductsUsingHEADForbidden creates a CountSearchProductsUsingHEADForbidden with default headers values
func NewCountSearchProductsUsingHEADForbidden() *CountSearchProductsUsingHEADForbidden {
	return &CountSearchProductsUsingHEADForbidden{}
}

/*CountSearchProductsUsingHEADForbidden handles this case with default header values.

Forbidden
*/
type CountSearchProductsUsingHEADForbidden struct {
}

func (o *CountSearchProductsUsingHEADForbidden) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/products/search][%d] countSearchProductsUsingHEADForbidden ", 403)
}

func (o *CountSearchProductsUsingHEADForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
