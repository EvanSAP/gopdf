// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"golang.org/x/net/context"
)

// NewCountSearchProductStockByLocationUsingHEADParams creates a new CountSearchProductStockByLocationUsingHEADParams object
// with the default values initialized.
func NewCountSearchProductStockByLocationUsingHEADParams() *CountSearchProductStockByLocationUsingHEADParams {
	var ()
	return &CountSearchProductStockByLocationUsingHEADParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCountSearchProductStockByLocationUsingHEADParamsWithTimeout creates a new CountSearchProductStockByLocationUsingHEADParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCountSearchProductStockByLocationUsingHEADParamsWithTimeout(timeout time.Duration) *CountSearchProductStockByLocationUsingHEADParams {
	var ()
	return &CountSearchProductStockByLocationUsingHEADParams{

		timeout: timeout,
	}
}

// NewCountSearchProductStockByLocationUsingHEADParamsWithContext creates a new CountSearchProductStockByLocationUsingHEADParams object
// with the default values initialized, and the ability to set a context for a request
func NewCountSearchProductStockByLocationUsingHEADParamsWithContext(ctx context.Context) *CountSearchProductStockByLocationUsingHEADParams {
	var ()
	return &CountSearchProductStockByLocationUsingHEADParams{

		Context: ctx,
	}
}

// NewCountSearchProductStockByLocationUsingHEADParamsWithHTTPClient creates a new CountSearchProductStockByLocationUsingHEADParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCountSearchProductStockByLocationUsingHEADParamsWithHTTPClient(client *http.Client) *CountSearchProductStockByLocationUsingHEADParams {
	var ()
	return &CountSearchProductStockByLocationUsingHEADParams{
		HTTPClient: client,
	}
}

/*CountSearchProductStockByLocationUsingHEADParams contains all the parameters to send to the API endpoint
for the count search product stock by location using h e a d operation typically these are written to a http.Request
*/
type CountSearchProductStockByLocationUsingHEADParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*Latitude
	  Latitude location parameter.

	*/
	Latitude *float64
	/*Location
	  Free-text location

	*/
	Location *string
	/*Longitude
	  Longitude location parameter.

	*/
	Longitude *float64
	/*ProductCode
	  Product identifier

	*/
	ProductCode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) WithTimeout(timeout time.Duration) *CountSearchProductStockByLocationUsingHEADParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) WithContext(ctx context.Context) *CountSearchProductStockByLocationUsingHEADParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) WithHTTPClient(client *http.Client) *CountSearchProductStockByLocationUsingHEADParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) WithBaseSiteID(baseSiteID string) *CountSearchProductStockByLocationUsingHEADParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithLatitude adds the latitude to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) WithLatitude(latitude *float64) *CountSearchProductStockByLocationUsingHEADParams {
	o.SetLatitude(latitude)
	return o
}

// SetLatitude adds the latitude to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) SetLatitude(latitude *float64) {
	o.Latitude = latitude
}

// WithLocation adds the location to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) WithLocation(location *string) *CountSearchProductStockByLocationUsingHEADParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) SetLocation(location *string) {
	o.Location = location
}

// WithLongitude adds the longitude to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) WithLongitude(longitude *float64) *CountSearchProductStockByLocationUsingHEADParams {
	o.SetLongitude(longitude)
	return o
}

// SetLongitude adds the longitude to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) SetLongitude(longitude *float64) {
	o.Longitude = longitude
}

// WithProductCode adds the productCode to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) WithProductCode(productCode string) *CountSearchProductStockByLocationUsingHEADParams {
	o.SetProductCode(productCode)
	return o
}

// SetProductCode adds the productCode to the count search product stock by location using h e a d params
func (o *CountSearchProductStockByLocationUsingHEADParams) SetProductCode(productCode string) {
	o.ProductCode = productCode
}

// WriteToRequest writes these params to a swagger request
func (o *CountSearchProductStockByLocationUsingHEADParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	if o.Latitude != nil {

		// query param latitude
		var qrLatitude float64
		if o.Latitude != nil {
			qrLatitude = *o.Latitude
		}
		qLatitude := swag.FormatFloat64(qrLatitude)
		if qLatitude != "" {
			if err := r.SetQueryParam("latitude", qLatitude); err != nil {
				return err
			}
		}

	}

	if o.Location != nil {

		// query param location
		var qrLocation string
		if o.Location != nil {
			qrLocation = *o.Location
		}
		qLocation := qrLocation
		if qLocation != "" {
			if err := r.SetQueryParam("location", qLocation); err != nil {
				return err
			}
		}

	}

	if o.Longitude != nil {

		// query param longitude
		var qrLongitude float64
		if o.Longitude != nil {
			qrLongitude = *o.Longitude
		}
		qLongitude := swag.FormatFloat64(qrLongitude)
		if qLongitude != "" {
			if err := r.SetQueryParam("longitude", qLongitude); err != nil {
				return err
			}
		}

	}

	// path param productCode
	if err := r.SetPathParam("productCode", o.ProductCode); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
