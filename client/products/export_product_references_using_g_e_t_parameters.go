// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"golang.org/x/net/context"
)

// NewExportProductReferencesUsingGETParams creates a new ExportProductReferencesUsingGETParams object
// with the default values initialized.
func NewExportProductReferencesUsingGETParams() *ExportProductReferencesUsingGETParams {
	var (
		fieldsDefault   = string("DEFAULT")
		pageSizeDefault = int32(2.147483647e+09)
	)
	return &ExportProductReferencesUsingGETParams{
		Fields:   &fieldsDefault,
		PageSize: &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewExportProductReferencesUsingGETParamsWithTimeout creates a new ExportProductReferencesUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewExportProductReferencesUsingGETParamsWithTimeout(timeout time.Duration) *ExportProductReferencesUsingGETParams {
	var (
		fieldsDefault   = string("DEFAULT")
		pageSizeDefault = int32(2.147483647e+09)
	)
	return &ExportProductReferencesUsingGETParams{
		Fields:   &fieldsDefault,
		PageSize: &pageSizeDefault,

		timeout: timeout,
	}
}

// NewExportProductReferencesUsingGETParamsWithContext creates a new ExportProductReferencesUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewExportProductReferencesUsingGETParamsWithContext(ctx context.Context) *ExportProductReferencesUsingGETParams {
	var (
		fieldsDefault   = string("DEFAULT")
		pageSizeDefault = int32(2.147483647e+09)
	)
	return &ExportProductReferencesUsingGETParams{
		Fields:   &fieldsDefault,
		PageSize: &pageSizeDefault,

		Context: ctx,
	}
}

// NewExportProductReferencesUsingGETParamsWithHTTPClient creates a new ExportProductReferencesUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewExportProductReferencesUsingGETParamsWithHTTPClient(client *http.Client) *ExportProductReferencesUsingGETParams {
	var (
		fieldsDefault   = string("DEFAULT")
		pageSizeDefault = int32(2.147483647e+09)
	)
	return &ExportProductReferencesUsingGETParams{
		Fields:     &fieldsDefault,
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*ExportProductReferencesUsingGETParams contains all the parameters to send to the API endpoint
for the export product references using g e t operation typically these are written to a http.Request
*/
type ExportProductReferencesUsingGETParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*Fields
	  Response configuration. This is the list of fields that should be returned in the response body.

	*/
	Fields *string
	/*PageSize
	  Maximum size of returned results.

	*/
	PageSize *int32
	/*ProductCode
	  Product identifier

	*/
	ProductCode string
	/*ReferenceType
	  Reference type according to enum ProductReferenceTypeEnum

	*/
	ReferenceType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) WithTimeout(timeout time.Duration) *ExportProductReferencesUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) WithContext(ctx context.Context) *ExportProductReferencesUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) WithHTTPClient(client *http.Client) *ExportProductReferencesUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) WithBaseSiteID(baseSiteID string) *ExportProductReferencesUsingGETParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithFields adds the fields to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) WithFields(fields *string) *ExportProductReferencesUsingGETParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithPageSize adds the pageSize to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) WithPageSize(pageSize *int32) *ExportProductReferencesUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithProductCode adds the productCode to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) WithProductCode(productCode string) *ExportProductReferencesUsingGETParams {
	o.SetProductCode(productCode)
	return o
}

// SetProductCode adds the productCode to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) SetProductCode(productCode string) {
	o.ProductCode = productCode
}

// WithReferenceType adds the referenceType to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) WithReferenceType(referenceType string) *ExportProductReferencesUsingGETParams {
	o.SetReferenceType(referenceType)
	return o
}

// SetReferenceType adds the referenceType to the export product references using g e t params
func (o *ExportProductReferencesUsingGETParams) SetReferenceType(referenceType string) {
	o.ReferenceType = referenceType
}

// WriteToRequest writes these params to a swagger request
func (o *ExportProductReferencesUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	// path param productCode
	if err := r.SetPathParam("productCode", o.ProductCode); err != nil {
		return err
	}

	// query param referenceType
	qrReferenceType := o.ReferenceType
	qReferenceType := qrReferenceType
	if qReferenceType != "" {
		if err := r.SetQueryParam("referenceType", qReferenceType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
