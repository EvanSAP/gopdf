// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// ExpressUpdateUsingGETReader is a Reader for the ExpressUpdateUsingGET structure.
type ExpressUpdateUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExpressUpdateUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewExpressUpdateUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewExpressUpdateUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewExpressUpdateUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewExpressUpdateUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewExpressUpdateUsingGETOK creates a ExpressUpdateUsingGETOK with default headers values
func NewExpressUpdateUsingGETOK() *ExpressUpdateUsingGETOK {
	return &ExpressUpdateUsingGETOK{}
}

/*ExpressUpdateUsingGETOK handles this case with default header values.

OK
*/
type ExpressUpdateUsingGETOK struct {
	Payload *models.ProductExpressUpdateElementListWsDTO
}

func (o *ExpressUpdateUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/products/expressupdate][%d] expressUpdateUsingGETOK  %+v", 200, o.Payload)
}

func (o *ExpressUpdateUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProductExpressUpdateElementListWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExpressUpdateUsingGETUnauthorized creates a ExpressUpdateUsingGETUnauthorized with default headers values
func NewExpressUpdateUsingGETUnauthorized() *ExpressUpdateUsingGETUnauthorized {
	return &ExpressUpdateUsingGETUnauthorized{}
}

/*ExpressUpdateUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type ExpressUpdateUsingGETUnauthorized struct {
}

func (o *ExpressUpdateUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/products/expressupdate][%d] expressUpdateUsingGETUnauthorized ", 401)
}

func (o *ExpressUpdateUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExpressUpdateUsingGETForbidden creates a ExpressUpdateUsingGETForbidden with default headers values
func NewExpressUpdateUsingGETForbidden() *ExpressUpdateUsingGETForbidden {
	return &ExpressUpdateUsingGETForbidden{}
}

/*ExpressUpdateUsingGETForbidden handles this case with default header values.

Forbidden
*/
type ExpressUpdateUsingGETForbidden struct {
}

func (o *ExpressUpdateUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/products/expressupdate][%d] expressUpdateUsingGETForbidden ", 403)
}

func (o *ExpressUpdateUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExpressUpdateUsingGETNotFound creates a ExpressUpdateUsingGETNotFound with default headers values
func NewExpressUpdateUsingGETNotFound() *ExpressUpdateUsingGETNotFound {
	return &ExpressUpdateUsingGETNotFound{}
}

/*ExpressUpdateUsingGETNotFound handles this case with default header values.

Not Found
*/
type ExpressUpdateUsingGETNotFound struct {
}

func (o *ExpressUpdateUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/products/expressupdate][%d] expressUpdateUsingGETNotFound ", 404)
}

func (o *ExpressUpdateUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
