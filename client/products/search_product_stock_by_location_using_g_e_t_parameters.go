// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"golang.org/x/net/context"
)

// NewSearchProductStockByLocationUsingGETParams creates a new SearchProductStockByLocationUsingGETParams object
// with the default values initialized.
func NewSearchProductStockByLocationUsingGETParams() *SearchProductStockByLocationUsingGETParams {
	var (
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
	)
	return &SearchProductStockByLocationUsingGETParams{
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchProductStockByLocationUsingGETParamsWithTimeout creates a new SearchProductStockByLocationUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchProductStockByLocationUsingGETParamsWithTimeout(timeout time.Duration) *SearchProductStockByLocationUsingGETParams {
	var (
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
	)
	return &SearchProductStockByLocationUsingGETParams{
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,

		timeout: timeout,
	}
}

// NewSearchProductStockByLocationUsingGETParamsWithContext creates a new SearchProductStockByLocationUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchProductStockByLocationUsingGETParamsWithContext(ctx context.Context) *SearchProductStockByLocationUsingGETParams {
	var (
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
	)
	return &SearchProductStockByLocationUsingGETParams{
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,

		Context: ctx,
	}
}

// NewSearchProductStockByLocationUsingGETParamsWithHTTPClient creates a new SearchProductStockByLocationUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchProductStockByLocationUsingGETParamsWithHTTPClient(client *http.Client) *SearchProductStockByLocationUsingGETParams {
	var (
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
	)
	return &SearchProductStockByLocationUsingGETParams{
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,
		HTTPClient:  client,
	}
}

/*SearchProductStockByLocationUsingGETParams contains all the parameters to send to the API endpoint
for the search product stock by location using g e t operation typically these are written to a http.Request
*/
type SearchProductStockByLocationUsingGETParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*CurrentPage
	  The current result page requested.

	*/
	CurrentPage *int32
	/*Fields
	  Response configuration. This is the list of fields that should be returned in the response body.

	*/
	Fields *string
	/*Latitude
	  Latitude location parameter.

	*/
	Latitude *float64
	/*Location
	  Free-text location

	*/
	Location *string
	/*Longitude
	  Longitude location parameter.

	*/
	Longitude *float64
	/*PageSize
	  The number of results returned per page.

	*/
	PageSize *int32
	/*ProductCode
	  Product identifier

	*/
	ProductCode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) WithTimeout(timeout time.Duration) *SearchProductStockByLocationUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) WithContext(ctx context.Context) *SearchProductStockByLocationUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) WithHTTPClient(client *http.Client) *SearchProductStockByLocationUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) WithBaseSiteID(baseSiteID string) *SearchProductStockByLocationUsingGETParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithCurrentPage adds the currentPage to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) WithCurrentPage(currentPage *int32) *SearchProductStockByLocationUsingGETParams {
	o.SetCurrentPage(currentPage)
	return o
}

// SetCurrentPage adds the currentPage to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) SetCurrentPage(currentPage *int32) {
	o.CurrentPage = currentPage
}

// WithFields adds the fields to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) WithFields(fields *string) *SearchProductStockByLocationUsingGETParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithLatitude adds the latitude to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) WithLatitude(latitude *float64) *SearchProductStockByLocationUsingGETParams {
	o.SetLatitude(latitude)
	return o
}

// SetLatitude adds the latitude to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) SetLatitude(latitude *float64) {
	o.Latitude = latitude
}

// WithLocation adds the location to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) WithLocation(location *string) *SearchProductStockByLocationUsingGETParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) SetLocation(location *string) {
	o.Location = location
}

// WithLongitude adds the longitude to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) WithLongitude(longitude *float64) *SearchProductStockByLocationUsingGETParams {
	o.SetLongitude(longitude)
	return o
}

// SetLongitude adds the longitude to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) SetLongitude(longitude *float64) {
	o.Longitude = longitude
}

// WithPageSize adds the pageSize to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) WithPageSize(pageSize *int32) *SearchProductStockByLocationUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithProductCode adds the productCode to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) WithProductCode(productCode string) *SearchProductStockByLocationUsingGETParams {
	o.SetProductCode(productCode)
	return o
}

// SetProductCode adds the productCode to the search product stock by location using g e t params
func (o *SearchProductStockByLocationUsingGETParams) SetProductCode(productCode string) {
	o.ProductCode = productCode
}

// WriteToRequest writes these params to a swagger request
func (o *SearchProductStockByLocationUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	if o.CurrentPage != nil {

		// query param currentPage
		var qrCurrentPage int32
		if o.CurrentPage != nil {
			qrCurrentPage = *o.CurrentPage
		}
		qCurrentPage := swag.FormatInt32(qrCurrentPage)
		if qCurrentPage != "" {
			if err := r.SetQueryParam("currentPage", qCurrentPage); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.Latitude != nil {

		// query param latitude
		var qrLatitude float64
		if o.Latitude != nil {
			qrLatitude = *o.Latitude
		}
		qLatitude := swag.FormatFloat64(qrLatitude)
		if qLatitude != "" {
			if err := r.SetQueryParam("latitude", qLatitude); err != nil {
				return err
			}
		}

	}

	if o.Location != nil {

		// query param location
		var qrLocation string
		if o.Location != nil {
			qrLocation = *o.Location
		}
		qLocation := qrLocation
		if qLocation != "" {
			if err := r.SetQueryParam("location", qLocation); err != nil {
				return err
			}
		}

	}

	if o.Longitude != nil {

		// query param longitude
		var qrLongitude float64
		if o.Longitude != nil {
			qrLongitude = *o.Longitude
		}
		qLongitude := swag.FormatFloat64(qrLongitude)
		if qLongitude != "" {
			if err := r.SetQueryParam("longitude", qLongitude); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	// path param productCode
	if err := r.SetPathParam("productCode", o.ProductCode); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
