// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"golang.org/x/net/context"
)

// NewGetOrdersForUserUsingGETParams creates a new GetOrdersForUserUsingGETParams object
// with the default values initialized.
func NewGetOrdersForUserUsingGETParams() *GetOrdersForUserUsingGETParams {
	var (
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
	)
	return &GetOrdersForUserUsingGETParams{
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrdersForUserUsingGETParamsWithTimeout creates a new GetOrdersForUserUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrdersForUserUsingGETParamsWithTimeout(timeout time.Duration) *GetOrdersForUserUsingGETParams {
	var (
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
	)
	return &GetOrdersForUserUsingGETParams{
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetOrdersForUserUsingGETParamsWithContext creates a new GetOrdersForUserUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrdersForUserUsingGETParamsWithContext(ctx context.Context) *GetOrdersForUserUsingGETParams {
	var (
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
	)
	return &GetOrdersForUserUsingGETParams{
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetOrdersForUserUsingGETParamsWithHTTPClient creates a new GetOrdersForUserUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrdersForUserUsingGETParamsWithHTTPClient(client *http.Client) *GetOrdersForUserUsingGETParams {
	var (
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
	)
	return &GetOrdersForUserUsingGETParams{
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,
		HTTPClient:  client,
	}
}

/*GetOrdersForUserUsingGETParams contains all the parameters to send to the API endpoint
for the get orders for user using g e t operation typically these are written to a http.Request
*/
type GetOrdersForUserUsingGETParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*CurrentPage
	  The current result page requested.

	*/
	CurrentPage *int32
	/*Fields
	  Response configuration. This is the list of fields that should be returned in the response body.

	*/
	Fields *string
	/*PageSize
	  The number of results returned per page.

	*/
	PageSize *int32
	/*Sort
	  Sorting method applied to the return results.

	*/
	Sort *string
	/*Statuses
	  Filters only certain order statuses. For example, statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID.

	*/
	Statuses *string
	/*UserID
	  User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) WithTimeout(timeout time.Duration) *GetOrdersForUserUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) WithContext(ctx context.Context) *GetOrdersForUserUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) WithHTTPClient(client *http.Client) *GetOrdersForUserUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) WithBaseSiteID(baseSiteID string) *GetOrdersForUserUsingGETParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithCurrentPage adds the currentPage to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) WithCurrentPage(currentPage *int32) *GetOrdersForUserUsingGETParams {
	o.SetCurrentPage(currentPage)
	return o
}

// SetCurrentPage adds the currentPage to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) SetCurrentPage(currentPage *int32) {
	o.CurrentPage = currentPage
}

// WithFields adds the fields to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) WithFields(fields *string) *GetOrdersForUserUsingGETParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithPageSize adds the pageSize to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) WithPageSize(pageSize *int32) *GetOrdersForUserUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSort adds the sort to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) WithSort(sort *string) *GetOrdersForUserUsingGETParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStatuses adds the statuses to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) WithStatuses(statuses *string) *GetOrdersForUserUsingGETParams {
	o.SetStatuses(statuses)
	return o
}

// SetStatuses adds the statuses to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) SetStatuses(statuses *string) {
	o.Statuses = statuses
}

// WithUserID adds the userID to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) WithUserID(userID string) *GetOrdersForUserUsingGETParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get orders for user using g e t params
func (o *GetOrdersForUserUsingGETParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrdersForUserUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	if o.CurrentPage != nil {

		// query param currentPage
		var qrCurrentPage int32
		if o.CurrentPage != nil {
			qrCurrentPage = *o.CurrentPage
		}
		qCurrentPage := swag.FormatInt32(qrCurrentPage)
		if qCurrentPage != "" {
			if err := r.SetQueryParam("currentPage", qCurrentPage); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.Statuses != nil {

		// query param statuses
		var qrStatuses string
		if o.Statuses != nil {
			qrStatuses = *o.Statuses
		}
		qStatuses := qrStatuses
		if qStatuses != "" {
			if err := r.SetQueryParam("statuses", qStatuses); err != nil {
				return err
			}
		}

	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
