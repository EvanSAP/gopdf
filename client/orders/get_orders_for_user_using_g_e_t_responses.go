// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetOrdersForUserUsingGETReader is a Reader for the GetOrdersForUserUsingGET structure.
type GetOrdersForUserUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrdersForUserUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetOrdersForUserUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetOrdersForUserUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetOrdersForUserUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetOrdersForUserUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOrdersForUserUsingGETOK creates a GetOrdersForUserUsingGETOK with default headers values
func NewGetOrdersForUserUsingGETOK() *GetOrdersForUserUsingGETOK {
	return &GetOrdersForUserUsingGETOK{}
}

/*GetOrdersForUserUsingGETOK handles this case with default header values.

OK
*/
type GetOrdersForUserUsingGETOK struct {
	Payload *models.OrderHistoryListWsDTO
}

func (o *GetOrdersForUserUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/orders][%d] getOrdersForUserUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetOrdersForUserUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OrderHistoryListWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrdersForUserUsingGETUnauthorized creates a GetOrdersForUserUsingGETUnauthorized with default headers values
func NewGetOrdersForUserUsingGETUnauthorized() *GetOrdersForUserUsingGETUnauthorized {
	return &GetOrdersForUserUsingGETUnauthorized{}
}

/*GetOrdersForUserUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetOrdersForUserUsingGETUnauthorized struct {
}

func (o *GetOrdersForUserUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/orders][%d] getOrdersForUserUsingGETUnauthorized ", 401)
}

func (o *GetOrdersForUserUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrdersForUserUsingGETForbidden creates a GetOrdersForUserUsingGETForbidden with default headers values
func NewGetOrdersForUserUsingGETForbidden() *GetOrdersForUserUsingGETForbidden {
	return &GetOrdersForUserUsingGETForbidden{}
}

/*GetOrdersForUserUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetOrdersForUserUsingGETForbidden struct {
}

func (o *GetOrdersForUserUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/orders][%d] getOrdersForUserUsingGETForbidden ", 403)
}

func (o *GetOrdersForUserUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrdersForUserUsingGETNotFound creates a GetOrdersForUserUsingGETNotFound with default headers values
func NewGetOrdersForUserUsingGETNotFound() *GetOrdersForUserUsingGETNotFound {
	return &GetOrdersForUserUsingGETNotFound{}
}

/*GetOrdersForUserUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetOrdersForUserUsingGETNotFound struct {
}

func (o *GetOrdersForUserUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/orders][%d] getOrdersForUserUsingGETNotFound ", 404)
}

func (o *GetOrdersForUserUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
