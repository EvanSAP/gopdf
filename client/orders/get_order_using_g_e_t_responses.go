// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetOrderUsingGETReader is a Reader for the GetOrderUsingGET structure.
type GetOrderUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrderUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetOrderUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetOrderUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetOrderUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetOrderUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOrderUsingGETOK creates a GetOrderUsingGETOK with default headers values
func NewGetOrderUsingGETOK() *GetOrderUsingGETOK {
	return &GetOrderUsingGETOK{}
}

/*GetOrderUsingGETOK handles this case with default header values.

OK
*/
type GetOrderUsingGETOK struct {
	Payload *models.OrderWsDTO
}

func (o *GetOrderUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/orders/{code}][%d] getOrderUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetOrderUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OrderWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderUsingGETUnauthorized creates a GetOrderUsingGETUnauthorized with default headers values
func NewGetOrderUsingGETUnauthorized() *GetOrderUsingGETUnauthorized {
	return &GetOrderUsingGETUnauthorized{}
}

/*GetOrderUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetOrderUsingGETUnauthorized struct {
}

func (o *GetOrderUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/orders/{code}][%d] getOrderUsingGETUnauthorized ", 401)
}

func (o *GetOrderUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrderUsingGETForbidden creates a GetOrderUsingGETForbidden with default headers values
func NewGetOrderUsingGETForbidden() *GetOrderUsingGETForbidden {
	return &GetOrderUsingGETForbidden{}
}

/*GetOrderUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetOrderUsingGETForbidden struct {
}

func (o *GetOrderUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/orders/{code}][%d] getOrderUsingGETForbidden ", 403)
}

func (o *GetOrderUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrderUsingGETNotFound creates a GetOrderUsingGETNotFound with default headers values
func NewGetOrderUsingGETNotFound() *GetOrderUsingGETNotFound {
	return &GetOrderUsingGETNotFound{}
}

/*GetOrderUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetOrderUsingGETNotFound struct {
}

func (o *GetOrderUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/orders/{code}][%d] getOrderUsingGETNotFound ", 404)
}

func (o *GetOrderUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
