// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// GetCountOrdersForUserUsingHEADReader is a Reader for the GetCountOrdersForUserUsingHEAD structure.
type GetCountOrdersForUserUsingHEADReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCountOrdersForUserUsingHEADReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCountOrdersForUserUsingHEADOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetCountOrdersForUserUsingHEADNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetCountOrdersForUserUsingHEADUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetCountOrdersForUserUsingHEADForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCountOrdersForUserUsingHEADOK creates a GetCountOrdersForUserUsingHEADOK with default headers values
func NewGetCountOrdersForUserUsingHEADOK() *GetCountOrdersForUserUsingHEADOK {
	return &GetCountOrdersForUserUsingHEADOK{}
}

/*GetCountOrdersForUserUsingHEADOK handles this case with default header values.

OK
*/
type GetCountOrdersForUserUsingHEADOK struct {
}

func (o *GetCountOrdersForUserUsingHEADOK) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/users/{userId}/orders][%d] getCountOrdersForUserUsingHEADOK ", 200)
}

func (o *GetCountOrdersForUserUsingHEADOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCountOrdersForUserUsingHEADNoContent creates a GetCountOrdersForUserUsingHEADNoContent with default headers values
func NewGetCountOrdersForUserUsingHEADNoContent() *GetCountOrdersForUserUsingHEADNoContent {
	return &GetCountOrdersForUserUsingHEADNoContent{}
}

/*GetCountOrdersForUserUsingHEADNoContent handles this case with default header values.

No Content
*/
type GetCountOrdersForUserUsingHEADNoContent struct {
}

func (o *GetCountOrdersForUserUsingHEADNoContent) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/users/{userId}/orders][%d] getCountOrdersForUserUsingHEADNoContent ", 204)
}

func (o *GetCountOrdersForUserUsingHEADNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCountOrdersForUserUsingHEADUnauthorized creates a GetCountOrdersForUserUsingHEADUnauthorized with default headers values
func NewGetCountOrdersForUserUsingHEADUnauthorized() *GetCountOrdersForUserUsingHEADUnauthorized {
	return &GetCountOrdersForUserUsingHEADUnauthorized{}
}

/*GetCountOrdersForUserUsingHEADUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCountOrdersForUserUsingHEADUnauthorized struct {
}

func (o *GetCountOrdersForUserUsingHEADUnauthorized) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/users/{userId}/orders][%d] getCountOrdersForUserUsingHEADUnauthorized ", 401)
}

func (o *GetCountOrdersForUserUsingHEADUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCountOrdersForUserUsingHEADForbidden creates a GetCountOrdersForUserUsingHEADForbidden with default headers values
func NewGetCountOrdersForUserUsingHEADForbidden() *GetCountOrdersForUserUsingHEADForbidden {
	return &GetCountOrdersForUserUsingHEADForbidden{}
}

/*GetCountOrdersForUserUsingHEADForbidden handles this case with default header values.

Forbidden
*/
type GetCountOrdersForUserUsingHEADForbidden struct {
}

func (o *GetCountOrdersForUserUsingHEADForbidden) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/users/{userId}/orders][%d] getCountOrdersForUserUsingHEADForbidden ", 403)
}

func (o *GetCountOrdersForUserUsingHEADForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
