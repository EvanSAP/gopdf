// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new orders API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for orders API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCountOrdersForUserUsingHEAD gets total number of orders

In the response header, the "x-total-count" indicates the total number of orders placed by a specified user for a specified base store.
*/
func (a *Client) GetCountOrdersForUserUsingHEAD(params *GetCountOrdersForUserUsingHEADParams, authInfo runtime.ClientAuthInfoWriter) (*GetCountOrdersForUserUsingHEADOK, *GetCountOrdersForUserUsingHEADNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCountOrdersForUserUsingHEADParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCountOrdersForUserUsingHEAD",
		Method:             "HEAD",
		PathPattern:        "/{baseSiteId}/users/{userId}/orders",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCountOrdersForUserUsingHEADReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetCountOrdersForUserUsingHEADOK:
		return value, nil, nil
	case *GetCountOrdersForUserUsingHEADNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetOrderForUserByCodeUsingGET gets a order

Returns specific order details based on a specific order code. The response contains detailed order information.
*/
func (a *Client) GetOrderForUserByCodeUsingGET(params *GetOrderForUserByCodeUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrderForUserByCodeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrderForUserByCodeUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrderForUserByCodeUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/orders/{code}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrderForUserByCodeUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrderForUserByCodeUsingGETOK), nil

}

/*
GetOrderUsingGET gets a order

Returns details of a specific order based on the order GUID (Globally Unique Identifier) or the order CODE. The response contains detailed order information.
*/
func (a *Client) GetOrderUsingGET(params *GetOrderUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrderUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrderUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrderUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/orders/{code}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrderUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrderUsingGETOK), nil

}

/*
GetOrdersForUserUsingGET gets order history for user

Returns order history data for all orders placed by a specified user for a specified base store. The response can display the results across multiple pages, if required.
*/
func (a *Client) GetOrdersForUserUsingGET(params *GetOrdersForUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrdersForUserUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrdersForUserUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrdersForUserUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/orders",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrdersForUserUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrdersForUserUsingGETOK), nil

}

/*
PlaceOrderUsingPOST posts a order

Authorizes the cart and places the order. The response contains the new order data.
*/
func (a *Client) PlaceOrderUsingPOST(params *PlaceOrderUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*PlaceOrderUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaceOrderUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "placeOrderUsingPOST",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/orders",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PlaceOrderUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PlaceOrderUsingPOSTCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
