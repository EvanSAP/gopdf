// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetOrderForUserByCodeUsingGETReader is a Reader for the GetOrderForUserByCodeUsingGET structure.
type GetOrderForUserByCodeUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrderForUserByCodeUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetOrderForUserByCodeUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetOrderForUserByCodeUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetOrderForUserByCodeUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetOrderForUserByCodeUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOrderForUserByCodeUsingGETOK creates a GetOrderForUserByCodeUsingGETOK with default headers values
func NewGetOrderForUserByCodeUsingGETOK() *GetOrderForUserByCodeUsingGETOK {
	return &GetOrderForUserByCodeUsingGETOK{}
}

/*GetOrderForUserByCodeUsingGETOK handles this case with default header values.

OK
*/
type GetOrderForUserByCodeUsingGETOK struct {
	Payload *models.OrderWsDTO
}

func (o *GetOrderForUserByCodeUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/orders/{code}][%d] getOrderForUserByCodeUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetOrderForUserByCodeUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OrderWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderForUserByCodeUsingGETUnauthorized creates a GetOrderForUserByCodeUsingGETUnauthorized with default headers values
func NewGetOrderForUserByCodeUsingGETUnauthorized() *GetOrderForUserByCodeUsingGETUnauthorized {
	return &GetOrderForUserByCodeUsingGETUnauthorized{}
}

/*GetOrderForUserByCodeUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetOrderForUserByCodeUsingGETUnauthorized struct {
}

func (o *GetOrderForUserByCodeUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/orders/{code}][%d] getOrderForUserByCodeUsingGETUnauthorized ", 401)
}

func (o *GetOrderForUserByCodeUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrderForUserByCodeUsingGETForbidden creates a GetOrderForUserByCodeUsingGETForbidden with default headers values
func NewGetOrderForUserByCodeUsingGETForbidden() *GetOrderForUserByCodeUsingGETForbidden {
	return &GetOrderForUserByCodeUsingGETForbidden{}
}

/*GetOrderForUserByCodeUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetOrderForUserByCodeUsingGETForbidden struct {
}

func (o *GetOrderForUserByCodeUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/orders/{code}][%d] getOrderForUserByCodeUsingGETForbidden ", 403)
}

func (o *GetOrderForUserByCodeUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrderForUserByCodeUsingGETNotFound creates a GetOrderForUserByCodeUsingGETNotFound with default headers values
func NewGetOrderForUserByCodeUsingGETNotFound() *GetOrderForUserByCodeUsingGETNotFound {
	return &GetOrderForUserByCodeUsingGETNotFound{}
}

/*GetOrderForUserByCodeUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetOrderForUserByCodeUsingGETNotFound struct {
}

func (o *GetOrderForUserByCodeUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/orders/{code}][%d] getOrderForUserByCodeUsingGETNotFound ", 404)
}

func (o *GetOrderForUserByCodeUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
