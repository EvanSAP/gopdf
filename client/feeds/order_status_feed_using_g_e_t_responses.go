// Code generated by go-swagger; DO NOT EDIT.

package feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// OrderStatusFeedUsingGETReader is a Reader for the OrderStatusFeedUsingGET structure.
type OrderStatusFeedUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrderStatusFeedUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewOrderStatusFeedUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewOrderStatusFeedUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewOrderStatusFeedUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewOrderStatusFeedUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOrderStatusFeedUsingGETOK creates a OrderStatusFeedUsingGETOK with default headers values
func NewOrderStatusFeedUsingGETOK() *OrderStatusFeedUsingGETOK {
	return &OrderStatusFeedUsingGETOK{}
}

/*OrderStatusFeedUsingGETOK handles this case with default header values.

OK
*/
type OrderStatusFeedUsingGETOK struct {
	Payload *models.OrderStatusUpdateElementListWsDTO
}

func (o *OrderStatusFeedUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/feeds/orders/statusfeed][%d] orderStatusFeedUsingGETOK  %+v", 200, o.Payload)
}

func (o *OrderStatusFeedUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OrderStatusUpdateElementListWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderStatusFeedUsingGETUnauthorized creates a OrderStatusFeedUsingGETUnauthorized with default headers values
func NewOrderStatusFeedUsingGETUnauthorized() *OrderStatusFeedUsingGETUnauthorized {
	return &OrderStatusFeedUsingGETUnauthorized{}
}

/*OrderStatusFeedUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type OrderStatusFeedUsingGETUnauthorized struct {
}

func (o *OrderStatusFeedUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/feeds/orders/statusfeed][%d] orderStatusFeedUsingGETUnauthorized ", 401)
}

func (o *OrderStatusFeedUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOrderStatusFeedUsingGETForbidden creates a OrderStatusFeedUsingGETForbidden with default headers values
func NewOrderStatusFeedUsingGETForbidden() *OrderStatusFeedUsingGETForbidden {
	return &OrderStatusFeedUsingGETForbidden{}
}

/*OrderStatusFeedUsingGETForbidden handles this case with default header values.

Forbidden
*/
type OrderStatusFeedUsingGETForbidden struct {
}

func (o *OrderStatusFeedUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/feeds/orders/statusfeed][%d] orderStatusFeedUsingGETForbidden ", 403)
}

func (o *OrderStatusFeedUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOrderStatusFeedUsingGETNotFound creates a OrderStatusFeedUsingGETNotFound with default headers values
func NewOrderStatusFeedUsingGETNotFound() *OrderStatusFeedUsingGETNotFound {
	return &OrderStatusFeedUsingGETNotFound{}
}

/*OrderStatusFeedUsingGETNotFound handles this case with default header values.

Not Found
*/
type OrderStatusFeedUsingGETNotFound struct {
}

func (o *OrderStatusFeedUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/feeds/orders/statusfeed][%d] orderStatusFeedUsingGETNotFound ", 404)
}

func (o *OrderStatusFeedUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
