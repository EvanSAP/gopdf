// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalogs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalogs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCatalogUsingGET gets a catalog

Returns information about a catalog based on its ID, along with the versions defined for the current base store.
*/
func (a *Client) GetCatalogUsingGET(params *GetCatalogUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCatalogUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/catalogs/{catalogId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCatalogUsingGETOK), nil

}

/*
GetCatalogVersionUsingGET gets information about catalog version

Returns information about the catalog version that exists for the current base store.
*/
func (a *Client) GetCatalogVersionUsingGET(params *GetCatalogVersionUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCatalogVersionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogVersionUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogVersionUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogVersionUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCatalogVersionUsingGETOK), nil

}

/*
GetCatalogsUsingGET gets a list of catalogs

Returns all catalogs with versions defined for the base store.
*/
func (a *Client) GetCatalogsUsingGET(params *GetCatalogsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCatalogsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/catalogs",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCatalogsUsingGETOK), nil

}

/*
GetCategoriesUsingGET gets information about catagory in a catalog version

Returns information about a specified category that exists in a catalog version available for the current base store.
*/
func (a *Client) GetCategoriesUsingGET(params *GetCategoriesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCategoriesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCategoriesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCategoriesUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCategoriesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCategoriesUsingGETOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
