// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetCatalogUsingGETReader is a Reader for the GetCatalogUsingGET structure.
type GetCatalogUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCatalogUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCatalogUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetCatalogUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetCatalogUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCatalogUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCatalogUsingGETOK creates a GetCatalogUsingGETOK with default headers values
func NewGetCatalogUsingGETOK() *GetCatalogUsingGETOK {
	return &GetCatalogUsingGETOK{}
}

/*GetCatalogUsingGETOK handles this case with default header values.

OK
*/
type GetCatalogUsingGETOK struct {
	Payload *models.CatalogWsDTO
}

func (o *GetCatalogUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs/{catalogId}][%d] getCatalogUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetCatalogUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CatalogWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogUsingGETUnauthorized creates a GetCatalogUsingGETUnauthorized with default headers values
func NewGetCatalogUsingGETUnauthorized() *GetCatalogUsingGETUnauthorized {
	return &GetCatalogUsingGETUnauthorized{}
}

/*GetCatalogUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCatalogUsingGETUnauthorized struct {
}

func (o *GetCatalogUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs/{catalogId}][%d] getCatalogUsingGETUnauthorized ", 401)
}

func (o *GetCatalogUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCatalogUsingGETForbidden creates a GetCatalogUsingGETForbidden with default headers values
func NewGetCatalogUsingGETForbidden() *GetCatalogUsingGETForbidden {
	return &GetCatalogUsingGETForbidden{}
}

/*GetCatalogUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetCatalogUsingGETForbidden struct {
}

func (o *GetCatalogUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs/{catalogId}][%d] getCatalogUsingGETForbidden ", 403)
}

func (o *GetCatalogUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCatalogUsingGETNotFound creates a GetCatalogUsingGETNotFound with default headers values
func NewGetCatalogUsingGETNotFound() *GetCatalogUsingGETNotFound {
	return &GetCatalogUsingGETNotFound{}
}

/*GetCatalogUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetCatalogUsingGETNotFound struct {
}

func (o *GetCatalogUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs/{catalogId}][%d] getCatalogUsingGETNotFound ", 404)
}

func (o *GetCatalogUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
