// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetCatalogVersionUsingGETReader is a Reader for the GetCatalogVersionUsingGET structure.
type GetCatalogVersionUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCatalogVersionUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCatalogVersionUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetCatalogVersionUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetCatalogVersionUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCatalogVersionUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCatalogVersionUsingGETOK creates a GetCatalogVersionUsingGETOK with default headers values
func NewGetCatalogVersionUsingGETOK() *GetCatalogVersionUsingGETOK {
	return &GetCatalogVersionUsingGETOK{}
}

/*GetCatalogVersionUsingGETOK handles this case with default header values.

OK
*/
type GetCatalogVersionUsingGETOK struct {
	Payload *models.CatalogVersionWsDTO
}

func (o *GetCatalogVersionUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}][%d] getCatalogVersionUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetCatalogVersionUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CatalogVersionWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogVersionUsingGETUnauthorized creates a GetCatalogVersionUsingGETUnauthorized with default headers values
func NewGetCatalogVersionUsingGETUnauthorized() *GetCatalogVersionUsingGETUnauthorized {
	return &GetCatalogVersionUsingGETUnauthorized{}
}

/*GetCatalogVersionUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCatalogVersionUsingGETUnauthorized struct {
}

func (o *GetCatalogVersionUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}][%d] getCatalogVersionUsingGETUnauthorized ", 401)
}

func (o *GetCatalogVersionUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCatalogVersionUsingGETForbidden creates a GetCatalogVersionUsingGETForbidden with default headers values
func NewGetCatalogVersionUsingGETForbidden() *GetCatalogVersionUsingGETForbidden {
	return &GetCatalogVersionUsingGETForbidden{}
}

/*GetCatalogVersionUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetCatalogVersionUsingGETForbidden struct {
}

func (o *GetCatalogVersionUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}][%d] getCatalogVersionUsingGETForbidden ", 403)
}

func (o *GetCatalogVersionUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCatalogVersionUsingGETNotFound creates a GetCatalogVersionUsingGETNotFound with default headers values
func NewGetCatalogVersionUsingGETNotFound() *GetCatalogVersionUsingGETNotFound {
	return &GetCatalogVersionUsingGETNotFound{}
}

/*GetCatalogVersionUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetCatalogVersionUsingGETNotFound struct {
}

func (o *GetCatalogVersionUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}][%d] getCatalogVersionUsingGETNotFound ", 404)
}

func (o *GetCatalogVersionUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
