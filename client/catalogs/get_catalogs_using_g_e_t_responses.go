// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetCatalogsUsingGETReader is a Reader for the GetCatalogsUsingGET structure.
type GetCatalogsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCatalogsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCatalogsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetCatalogsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetCatalogsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCatalogsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCatalogsUsingGETOK creates a GetCatalogsUsingGETOK with default headers values
func NewGetCatalogsUsingGETOK() *GetCatalogsUsingGETOK {
	return &GetCatalogsUsingGETOK{}
}

/*GetCatalogsUsingGETOK handles this case with default header values.

OK
*/
type GetCatalogsUsingGETOK struct {
	Payload *models.CatalogListWsDTO
}

func (o *GetCatalogsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs][%d] getCatalogsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetCatalogsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CatalogListWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogsUsingGETUnauthorized creates a GetCatalogsUsingGETUnauthorized with default headers values
func NewGetCatalogsUsingGETUnauthorized() *GetCatalogsUsingGETUnauthorized {
	return &GetCatalogsUsingGETUnauthorized{}
}

/*GetCatalogsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCatalogsUsingGETUnauthorized struct {
}

func (o *GetCatalogsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs][%d] getCatalogsUsingGETUnauthorized ", 401)
}

func (o *GetCatalogsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCatalogsUsingGETForbidden creates a GetCatalogsUsingGETForbidden with default headers values
func NewGetCatalogsUsingGETForbidden() *GetCatalogsUsingGETForbidden {
	return &GetCatalogsUsingGETForbidden{}
}

/*GetCatalogsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetCatalogsUsingGETForbidden struct {
}

func (o *GetCatalogsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs][%d] getCatalogsUsingGETForbidden ", 403)
}

func (o *GetCatalogsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCatalogsUsingGETNotFound creates a GetCatalogsUsingGETNotFound with default headers values
func NewGetCatalogsUsingGETNotFound() *GetCatalogsUsingGETNotFound {
	return &GetCatalogsUsingGETNotFound{}
}

/*GetCatalogsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetCatalogsUsingGETNotFound struct {
}

func (o *GetCatalogsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/catalogs][%d] getCatalogsUsingGETNotFound ", 404)
}

func (o *GetCatalogsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
