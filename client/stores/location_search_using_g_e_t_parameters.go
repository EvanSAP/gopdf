// Code generated by go-swagger; DO NOT EDIT.

package stores

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"golang.org/x/net/context"
)

// NewLocationSearchUsingGETParams creates a new LocationSearchUsingGETParams object
// with the default values initialized.
func NewLocationSearchUsingGETParams() *LocationSearchUsingGETParams {
	var (
		accuracyDefault    = float64(0)
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
		radiusDefault      = float64(100000)
		sortDefault        = string("asc")
	)
	return &LocationSearchUsingGETParams{
		Accuracy:    &accuracyDefault,
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,
		Radius:      &radiusDefault,
		Sort:        &sortDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewLocationSearchUsingGETParamsWithTimeout creates a new LocationSearchUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLocationSearchUsingGETParamsWithTimeout(timeout time.Duration) *LocationSearchUsingGETParams {
	var (
		accuracyDefault    = float64(0)
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
		radiusDefault      = float64(100000)
		sortDefault        = string("asc")
	)
	return &LocationSearchUsingGETParams{
		Accuracy:    &accuracyDefault,
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,
		Radius:      &radiusDefault,
		Sort:        &sortDefault,

		timeout: timeout,
	}
}

// NewLocationSearchUsingGETParamsWithContext creates a new LocationSearchUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewLocationSearchUsingGETParamsWithContext(ctx context.Context) *LocationSearchUsingGETParams {
	var (
		accuracyDefault    = float64(0)
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
		radiusDefault      = float64(100000)
		sortDefault        = string("asc")
	)
	return &LocationSearchUsingGETParams{
		Accuracy:    &accuracyDefault,
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,
		Radius:      &radiusDefault,
		Sort:        &sortDefault,

		Context: ctx,
	}
}

// NewLocationSearchUsingGETParamsWithHTTPClient creates a new LocationSearchUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLocationSearchUsingGETParamsWithHTTPClient(client *http.Client) *LocationSearchUsingGETParams {
	var (
		accuracyDefault    = float64(0)
		currentPageDefault = int32(0)
		fieldsDefault      = string("DEFAULT")
		pageSizeDefault    = int32(20)
		radiusDefault      = float64(100000)
		sortDefault        = string("asc")
	)
	return &LocationSearchUsingGETParams{
		Accuracy:    &accuracyDefault,
		CurrentPage: &currentPageDefault,
		Fields:      &fieldsDefault,
		PageSize:    &pageSizeDefault,
		Radius:      &radiusDefault,
		Sort:        &sortDefault,
		HTTPClient:  client,
	}
}

/*LocationSearchUsingGETParams contains all the parameters to send to the API endpoint
for the location search using g e t operation typically these are written to a http.Request
*/
type LocationSearchUsingGETParams struct {

	/*Accuracy
	  Accuracy in meters.

	*/
	Accuracy *float64
	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*CurrentPage
	  The current result page requested.

	*/
	CurrentPage *int32
	/*Fields
	  Response configuration. This is the list of fields that should be returned in the response body.

	*/
	Fields *string
	/*Latitude
	  Coordinate that specifies the north-south position of a point on the Earth's surface.

	*/
	Latitude *float64
	/*Longitude
	  Coordinate that specifies the east-west position of a point on the Earth's surface.

	*/
	Longitude *float64
	/*PageSize
	  The number of results returned per page.

	*/
	PageSize *int32
	/*Query
	  Location in natural language i.e. city or country.

	*/
	Query *string
	/*Radius
	  Radius in meters. Max value: 40075000.0 (Earth's perimeter).

	*/
	Radius *float64
	/*Sort
	  Sorting method applied to the return results.

	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithTimeout(timeout time.Duration) *LocationSearchUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithContext(ctx context.Context) *LocationSearchUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithHTTPClient(client *http.Client) *LocationSearchUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccuracy adds the accuracy to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithAccuracy(accuracy *float64) *LocationSearchUsingGETParams {
	o.SetAccuracy(accuracy)
	return o
}

// SetAccuracy adds the accuracy to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetAccuracy(accuracy *float64) {
	o.Accuracy = accuracy
}

// WithBaseSiteID adds the baseSiteID to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithBaseSiteID(baseSiteID string) *LocationSearchUsingGETParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithCurrentPage adds the currentPage to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithCurrentPage(currentPage *int32) *LocationSearchUsingGETParams {
	o.SetCurrentPage(currentPage)
	return o
}

// SetCurrentPage adds the currentPage to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetCurrentPage(currentPage *int32) {
	o.CurrentPage = currentPage
}

// WithFields adds the fields to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithFields(fields *string) *LocationSearchUsingGETParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithLatitude adds the latitude to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithLatitude(latitude *float64) *LocationSearchUsingGETParams {
	o.SetLatitude(latitude)
	return o
}

// SetLatitude adds the latitude to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetLatitude(latitude *float64) {
	o.Latitude = latitude
}

// WithLongitude adds the longitude to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithLongitude(longitude *float64) *LocationSearchUsingGETParams {
	o.SetLongitude(longitude)
	return o
}

// SetLongitude adds the longitude to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetLongitude(longitude *float64) {
	o.Longitude = longitude
}

// WithPageSize adds the pageSize to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithPageSize(pageSize *int32) *LocationSearchUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithQuery adds the query to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithQuery(query *string) *LocationSearchUsingGETParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetQuery(query *string) {
	o.Query = query
}

// WithRadius adds the radius to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithRadius(radius *float64) *LocationSearchUsingGETParams {
	o.SetRadius(radius)
	return o
}

// SetRadius adds the radius to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetRadius(radius *float64) {
	o.Radius = radius
}

// WithSort adds the sort to the location search using g e t params
func (o *LocationSearchUsingGETParams) WithSort(sort *string) *LocationSearchUsingGETParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the location search using g e t params
func (o *LocationSearchUsingGETParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *LocationSearchUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Accuracy != nil {

		// query param accuracy
		var qrAccuracy float64
		if o.Accuracy != nil {
			qrAccuracy = *o.Accuracy
		}
		qAccuracy := swag.FormatFloat64(qrAccuracy)
		if qAccuracy != "" {
			if err := r.SetQueryParam("accuracy", qAccuracy); err != nil {
				return err
			}
		}

	}

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	if o.CurrentPage != nil {

		// query param currentPage
		var qrCurrentPage int32
		if o.CurrentPage != nil {
			qrCurrentPage = *o.CurrentPage
		}
		qCurrentPage := swag.FormatInt32(qrCurrentPage)
		if qCurrentPage != "" {
			if err := r.SetQueryParam("currentPage", qCurrentPage); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.Latitude != nil {

		// query param latitude
		var qrLatitude float64
		if o.Latitude != nil {
			qrLatitude = *o.Latitude
		}
		qLatitude := swag.FormatFloat64(qrLatitude)
		if qLatitude != "" {
			if err := r.SetQueryParam("latitude", qLatitude); err != nil {
				return err
			}
		}

	}

	if o.Longitude != nil {

		// query param longitude
		var qrLongitude float64
		if o.Longitude != nil {
			qrLongitude = *o.Longitude
		}
		qLongitude := swag.FormatFloat64(qrLongitude)
		if qLongitude != "" {
			if err := r.SetQueryParam("longitude", qLongitude); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.Query != nil {

		// query param query
		var qrQuery string
		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {
			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}

	}

	if o.Radius != nil {

		// query param radius
		var qrRadius float64
		if o.Radius != nil {
			qrRadius = *o.Radius
		}
		qRadius := swag.FormatFloat64(qrRadius)
		if qRadius != "" {
			if err := r.SetQueryParam("radius", qRadius); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
