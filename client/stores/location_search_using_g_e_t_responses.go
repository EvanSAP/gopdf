// Code generated by go-swagger; DO NOT EDIT.

package stores

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// LocationSearchUsingGETReader is a Reader for the LocationSearchUsingGET structure.
type LocationSearchUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LocationSearchUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewLocationSearchUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewLocationSearchUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewLocationSearchUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewLocationSearchUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLocationSearchUsingGETOK creates a LocationSearchUsingGETOK with default headers values
func NewLocationSearchUsingGETOK() *LocationSearchUsingGETOK {
	return &LocationSearchUsingGETOK{}
}

/*LocationSearchUsingGETOK handles this case with default header values.

OK
*/
type LocationSearchUsingGETOK struct {
	Payload *models.StoreFinderSearchPageWsDTO
}

func (o *LocationSearchUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/stores][%d] locationSearchUsingGETOK  %+v", 200, o.Payload)
}

func (o *LocationSearchUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StoreFinderSearchPageWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLocationSearchUsingGETUnauthorized creates a LocationSearchUsingGETUnauthorized with default headers values
func NewLocationSearchUsingGETUnauthorized() *LocationSearchUsingGETUnauthorized {
	return &LocationSearchUsingGETUnauthorized{}
}

/*LocationSearchUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type LocationSearchUsingGETUnauthorized struct {
}

func (o *LocationSearchUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/stores][%d] locationSearchUsingGETUnauthorized ", 401)
}

func (o *LocationSearchUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLocationSearchUsingGETForbidden creates a LocationSearchUsingGETForbidden with default headers values
func NewLocationSearchUsingGETForbidden() *LocationSearchUsingGETForbidden {
	return &LocationSearchUsingGETForbidden{}
}

/*LocationSearchUsingGETForbidden handles this case with default header values.

Forbidden
*/
type LocationSearchUsingGETForbidden struct {
}

func (o *LocationSearchUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/stores][%d] locationSearchUsingGETForbidden ", 403)
}

func (o *LocationSearchUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLocationSearchUsingGETNotFound creates a LocationSearchUsingGETNotFound with default headers values
func NewLocationSearchUsingGETNotFound() *LocationSearchUsingGETNotFound {
	return &LocationSearchUsingGETNotFound{}
}

/*LocationSearchUsingGETNotFound handles this case with default header values.

Not Found
*/
type LocationSearchUsingGETNotFound struct {
}

func (o *LocationSearchUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/stores][%d] locationSearchUsingGETNotFound ", 404)
}

func (o *LocationSearchUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
