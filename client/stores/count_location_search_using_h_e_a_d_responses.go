// Code generated by go-swagger; DO NOT EDIT.

package stores

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// CountLocationSearchUsingHEADReader is a Reader for the CountLocationSearchUsingHEAD structure.
type CountLocationSearchUsingHEADReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CountLocationSearchUsingHEADReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCountLocationSearchUsingHEADOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewCountLocationSearchUsingHEADNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCountLocationSearchUsingHEADUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCountLocationSearchUsingHEADForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCountLocationSearchUsingHEADOK creates a CountLocationSearchUsingHEADOK with default headers values
func NewCountLocationSearchUsingHEADOK() *CountLocationSearchUsingHEADOK {
	return &CountLocationSearchUsingHEADOK{}
}

/*CountLocationSearchUsingHEADOK handles this case with default header values.

OK
*/
type CountLocationSearchUsingHEADOK struct {
}

func (o *CountLocationSearchUsingHEADOK) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/stores][%d] countLocationSearchUsingHEADOK ", 200)
}

func (o *CountLocationSearchUsingHEADOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCountLocationSearchUsingHEADNoContent creates a CountLocationSearchUsingHEADNoContent with default headers values
func NewCountLocationSearchUsingHEADNoContent() *CountLocationSearchUsingHEADNoContent {
	return &CountLocationSearchUsingHEADNoContent{}
}

/*CountLocationSearchUsingHEADNoContent handles this case with default header values.

No Content
*/
type CountLocationSearchUsingHEADNoContent struct {
}

func (o *CountLocationSearchUsingHEADNoContent) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/stores][%d] countLocationSearchUsingHEADNoContent ", 204)
}

func (o *CountLocationSearchUsingHEADNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCountLocationSearchUsingHEADUnauthorized creates a CountLocationSearchUsingHEADUnauthorized with default headers values
func NewCountLocationSearchUsingHEADUnauthorized() *CountLocationSearchUsingHEADUnauthorized {
	return &CountLocationSearchUsingHEADUnauthorized{}
}

/*CountLocationSearchUsingHEADUnauthorized handles this case with default header values.

Unauthorized
*/
type CountLocationSearchUsingHEADUnauthorized struct {
}

func (o *CountLocationSearchUsingHEADUnauthorized) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/stores][%d] countLocationSearchUsingHEADUnauthorized ", 401)
}

func (o *CountLocationSearchUsingHEADUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCountLocationSearchUsingHEADForbidden creates a CountLocationSearchUsingHEADForbidden with default headers values
func NewCountLocationSearchUsingHEADForbidden() *CountLocationSearchUsingHEADForbidden {
	return &CountLocationSearchUsingHEADForbidden{}
}

/*CountLocationSearchUsingHEADForbidden handles this case with default header values.

Forbidden
*/
type CountLocationSearchUsingHEADForbidden struct {
}

func (o *CountLocationSearchUsingHEADForbidden) Error() string {
	return fmt.Sprintf("[HEAD /{baseSiteId}/stores][%d] countLocationSearchUsingHEADForbidden ", 403)
}

func (o *CountLocationSearchUsingHEADForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
