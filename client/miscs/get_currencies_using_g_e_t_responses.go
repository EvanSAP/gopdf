// Code generated by go-swagger; DO NOT EDIT.

package miscs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetCurrenciesUsingGETReader is a Reader for the GetCurrenciesUsingGET structure.
type GetCurrenciesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCurrenciesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCurrenciesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetCurrenciesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetCurrenciesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCurrenciesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCurrenciesUsingGETOK creates a GetCurrenciesUsingGETOK with default headers values
func NewGetCurrenciesUsingGETOK() *GetCurrenciesUsingGETOK {
	return &GetCurrenciesUsingGETOK{}
}

/*GetCurrenciesUsingGETOK handles this case with default header values.

OK
*/
type GetCurrenciesUsingGETOK struct {
	Payload *models.CurrencyListWsDTO
}

func (o *GetCurrenciesUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/currencies][%d] getCurrenciesUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetCurrenciesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CurrencyListWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCurrenciesUsingGETUnauthorized creates a GetCurrenciesUsingGETUnauthorized with default headers values
func NewGetCurrenciesUsingGETUnauthorized() *GetCurrenciesUsingGETUnauthorized {
	return &GetCurrenciesUsingGETUnauthorized{}
}

/*GetCurrenciesUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCurrenciesUsingGETUnauthorized struct {
}

func (o *GetCurrenciesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/currencies][%d] getCurrenciesUsingGETUnauthorized ", 401)
}

func (o *GetCurrenciesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCurrenciesUsingGETForbidden creates a GetCurrenciesUsingGETForbidden with default headers values
func NewGetCurrenciesUsingGETForbidden() *GetCurrenciesUsingGETForbidden {
	return &GetCurrenciesUsingGETForbidden{}
}

/*GetCurrenciesUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetCurrenciesUsingGETForbidden struct {
}

func (o *GetCurrenciesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/currencies][%d] getCurrenciesUsingGETForbidden ", 403)
}

func (o *GetCurrenciesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCurrenciesUsingGETNotFound creates a GetCurrenciesUsingGETNotFound with default headers values
func NewGetCurrenciesUsingGETNotFound() *GetCurrenciesUsingGETNotFound {
	return &GetCurrenciesUsingGETNotFound{}
}

/*GetCurrenciesUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetCurrenciesUsingGETNotFound struct {
}

func (o *GetCurrenciesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/currencies][%d] getCurrenciesUsingGETNotFound ", 404)
}

func (o *GetCurrenciesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
