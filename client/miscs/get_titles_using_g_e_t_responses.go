// Code generated by go-swagger; DO NOT EDIT.

package miscs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetTitlesUsingGETReader is a Reader for the GetTitlesUsingGET structure.
type GetTitlesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTitlesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTitlesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetTitlesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetTitlesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTitlesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTitlesUsingGETOK creates a GetTitlesUsingGETOK with default headers values
func NewGetTitlesUsingGETOK() *GetTitlesUsingGETOK {
	return &GetTitlesUsingGETOK{}
}

/*GetTitlesUsingGETOK handles this case with default header values.

OK
*/
type GetTitlesUsingGETOK struct {
	Payload *models.TitleListWsDTO
}

func (o *GetTitlesUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/titles][%d] getTitlesUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetTitlesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TitleListWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTitlesUsingGETUnauthorized creates a GetTitlesUsingGETUnauthorized with default headers values
func NewGetTitlesUsingGETUnauthorized() *GetTitlesUsingGETUnauthorized {
	return &GetTitlesUsingGETUnauthorized{}
}

/*GetTitlesUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetTitlesUsingGETUnauthorized struct {
}

func (o *GetTitlesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/titles][%d] getTitlesUsingGETUnauthorized ", 401)
}

func (o *GetTitlesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTitlesUsingGETForbidden creates a GetTitlesUsingGETForbidden with default headers values
func NewGetTitlesUsingGETForbidden() *GetTitlesUsingGETForbidden {
	return &GetTitlesUsingGETForbidden{}
}

/*GetTitlesUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetTitlesUsingGETForbidden struct {
}

func (o *GetTitlesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/titles][%d] getTitlesUsingGETForbidden ", 403)
}

func (o *GetTitlesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTitlesUsingGETNotFound creates a GetTitlesUsingGETNotFound with default headers values
func NewGetTitlesUsingGETNotFound() *GetTitlesUsingGETNotFound {
	return &GetTitlesUsingGETNotFound{}
}

/*GetTitlesUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetTitlesUsingGETNotFound struct {
}

func (o *GetTitlesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/titles][%d] getTitlesUsingGETNotFound ", 404)
}

func (o *GetTitlesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
