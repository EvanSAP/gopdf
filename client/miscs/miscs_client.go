// Code generated by go-swagger; DO NOT EDIT.

package miscs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new miscs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for miscs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCardTypesUsingGET gets a list of supported payment card types

Lists supported payment card types.
*/
func (a *Client) GetCardTypesUsingGET(params *GetCardTypesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCardTypesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCardTypesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCardTypesUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/cardtypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCardTypesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCardTypesUsingGETOK), nil

}

/*
GetCurrenciesUsingGET gets a list of available currencies

Lists all available currencies (all usable currencies for the current store). If the list of currencies for a base store is empty, a list of all currencies available in the system is returned.
*/
func (a *Client) GetCurrenciesUsingGET(params *GetCurrenciesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrenciesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrenciesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCurrenciesUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/currencies",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrenciesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrenciesUsingGETOK), nil

}

/*
GetDeliveryCountriesUsingGET gets a list of shipping countries

Lists all supported delivery countries for the current store. The list is sorted alphabetically.
*/
func (a *Client) GetDeliveryCountriesUsingGET(params *GetDeliveryCountriesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeliveryCountriesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeliveryCountriesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeliveryCountriesUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/deliverycountries",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeliveryCountriesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeliveryCountriesUsingGETOK), nil

}

/*
GetLanguagesUsingGET gets a list of available languages

Lists all available languages (all languages used for a particular store). If the list of languages for a base store is empty, a list of all languages available in the system will be returned.
*/
func (a *Client) GetLanguagesUsingGET(params *GetLanguagesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetLanguagesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLanguagesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLanguagesUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/languages",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLanguagesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLanguagesUsingGETOK), nil

}

/*
GetTitlesUsingGET gets a list of all localized titles

Lists all localized titles.
*/
func (a *Client) GetTitlesUsingGET(params *GetTitlesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetTitlesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTitlesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTitlesUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/titles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTitlesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTitlesUsingGETOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
