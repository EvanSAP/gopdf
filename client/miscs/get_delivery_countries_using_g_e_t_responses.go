// Code generated by go-swagger; DO NOT EDIT.

package miscs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetDeliveryCountriesUsingGETReader is a Reader for the GetDeliveryCountriesUsingGET structure.
type GetDeliveryCountriesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeliveryCountriesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDeliveryCountriesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetDeliveryCountriesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetDeliveryCountriesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetDeliveryCountriesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDeliveryCountriesUsingGETOK creates a GetDeliveryCountriesUsingGETOK with default headers values
func NewGetDeliveryCountriesUsingGETOK() *GetDeliveryCountriesUsingGETOK {
	return &GetDeliveryCountriesUsingGETOK{}
}

/*GetDeliveryCountriesUsingGETOK handles this case with default header values.

OK
*/
type GetDeliveryCountriesUsingGETOK struct {
	Payload *models.CountryListWsDTO
}

func (o *GetDeliveryCountriesUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/deliverycountries][%d] getDeliveryCountriesUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetDeliveryCountriesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CountryListWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeliveryCountriesUsingGETUnauthorized creates a GetDeliveryCountriesUsingGETUnauthorized with default headers values
func NewGetDeliveryCountriesUsingGETUnauthorized() *GetDeliveryCountriesUsingGETUnauthorized {
	return &GetDeliveryCountriesUsingGETUnauthorized{}
}

/*GetDeliveryCountriesUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDeliveryCountriesUsingGETUnauthorized struct {
}

func (o *GetDeliveryCountriesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/deliverycountries][%d] getDeliveryCountriesUsingGETUnauthorized ", 401)
}

func (o *GetDeliveryCountriesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeliveryCountriesUsingGETForbidden creates a GetDeliveryCountriesUsingGETForbidden with default headers values
func NewGetDeliveryCountriesUsingGETForbidden() *GetDeliveryCountriesUsingGETForbidden {
	return &GetDeliveryCountriesUsingGETForbidden{}
}

/*GetDeliveryCountriesUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetDeliveryCountriesUsingGETForbidden struct {
}

func (o *GetDeliveryCountriesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/deliverycountries][%d] getDeliveryCountriesUsingGETForbidden ", 403)
}

func (o *GetDeliveryCountriesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeliveryCountriesUsingGETNotFound creates a GetDeliveryCountriesUsingGETNotFound with default headers values
func NewGetDeliveryCountriesUsingGETNotFound() *GetDeliveryCountriesUsingGETNotFound {
	return &GetDeliveryCountriesUsingGETNotFound{}
}

/*GetDeliveryCountriesUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetDeliveryCountriesUsingGETNotFound struct {
}

func (o *GetDeliveryCountriesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/deliverycountries][%d] getDeliveryCountriesUsingGETNotFound ", 404)
}

func (o *GetDeliveryCountriesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
