// Code generated by go-swagger; DO NOT EDIT.

package extended_carts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new extended carts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for extended carts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ConsolidatePickupLocationsUsingPOST handles the consolidating pickup locations

Specifies one store location where all items will be picked up.

Note, if any of the items are not available at the specified location, these items are removed from the cart.
*/
func (a *Client) ConsolidatePickupLocationsUsingPOST(params *ConsolidatePickupLocationsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ConsolidatePickupLocationsUsingPOSTOK, *ConsolidatePickupLocationsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsolidatePickupLocationsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "consolidatePickupLocationsUsingPOST",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsolidatePickupLocationsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConsolidatePickupLocationsUsingPOSTOK:
		return value, nil, nil
	case *ConsolidatePickupLocationsUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteSopPaymentResponseUsingDELETE deletes payment provider response related to cart

Deletes the payment provider response related to the specified cart.
*/
func (a *Client) DeleteSopPaymentResponseUsingDELETE(params *DeleteSopPaymentResponseUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSopPaymentResponseUsingDELETEOK, *DeleteSopPaymentResponseUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSopPaymentResponseUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSopPaymentResponseUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSopPaymentResponseUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteSopPaymentResponseUsingDELETEOK:
		return value, nil, nil
	case *DeleteSopPaymentResponseUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetConsolidatedPickupOptionsUsingGET gets consolidated pickup options

Returns a list of stores that have all the pick-up items in stock.

Note, if there are no stores that have all the pick up items in stock, or all items are already set to the same pick up location, the response returns an empty list.
*/
func (a *Client) GetConsolidatedPickupOptionsUsingGET(params *GetConsolidatedPickupOptionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetConsolidatedPickupOptionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsolidatedPickupOptionsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConsolidatedPickupOptionsUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsolidatedPickupOptionsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConsolidatedPickupOptionsUsingGETOK), nil

}

/*
GetSopPaymentRequestDetailsUsingGET gets information needed for create subscription

Returns the necessary information for creating a subscription that contacts the payment provider directly. This information contains the payment provider URL and a list of parameters that are needed to create the subscription.
*/
func (a *Client) GetSopPaymentRequestDetailsUsingGET(params *GetSopPaymentRequestDetailsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSopPaymentRequestDetailsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSopPaymentRequestDetailsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSopPaymentRequestDetailsUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/request",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSopPaymentRequestDetailsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSopPaymentRequestDetailsUsingGETOK), nil

}

/*
GetSopPaymentResponseUsingGET gets information about create subscription request results

Returns information related to creating subscription request results. If there is no response from the payment provider, a "202 Accepted" status is returned. If the subscription is created successfully, the payment details are returned. Otherwise, an error response is returned.

Note, the “Try it out” button is not enabled for this method (always returns an error) because the Extended Carts Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorwebservicesaddon AddOn” documentation on help.hybris.com.
*/
func (a *Client) GetSopPaymentResponseUsingGET(params *GetSopPaymentResponseUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSopPaymentResponseUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSopPaymentResponseUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSopPaymentResponseUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSopPaymentResponseUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSopPaymentResponseUsingGETOK), nil

}

/*
HandleSopPaymentResponseUsingPOST handles response from payment provider and create payment details

Handles the response from the payment provider and creates payment details.

Note, the “Try it out” button is not enabled for this method (always returns an error) because the Extended Carts Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorwebservicesaddon AddOn” documentation on help.hybris.com.
*/
func (a *Client) HandleSopPaymentResponseUsingPOST(params *HandleSopPaymentResponseUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*HandleSopPaymentResponseUsingPOSTOK, *HandleSopPaymentResponseUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleSopPaymentResponseUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "handleSopPaymentResponseUsingPOST",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HandleSopPaymentResponseUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HandleSopPaymentResponseUsingPOSTOK:
		return value, nil, nil
	case *HandleSopPaymentResponseUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
