// Code generated by go-swagger; DO NOT EDIT.

package customer_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new customer groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AssignUserToCustomerGroupUsingPATCH1 assigns user s to a customer group

Assigns user(s) to a customer group.

To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
*/
func (a *Client) AssignUserToCustomerGroupUsingPATCH1(params *AssignUserToCustomerGroupUsingPATCH1Params, authInfo runtime.ClientAuthInfoWriter) (*AssignUserToCustomerGroupUsingPATCH1OK, *AssignUserToCustomerGroupUsingPATCH1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignUserToCustomerGroupUsingPATCH1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignUserToCustomerGroupUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/{baseSiteId}/customergroups/{groupId}/members",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssignUserToCustomerGroupUsingPATCH1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AssignUserToCustomerGroupUsingPATCH1OK:
		return value, nil, nil
	case *AssignUserToCustomerGroupUsingPATCH1NoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
CreateNewCustomerGroupUsingPOST1 creates a new customer group

Creates a new customer group that is a direct subgroup of a customergroup.

To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
*/
func (a *Client) CreateNewCustomerGroupUsingPOST1(params *CreateNewCustomerGroupUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter) (*CreateNewCustomerGroupUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNewCustomerGroupUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNewCustomerGroupUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/customergroups",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNewCustomerGroupUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNewCustomerGroupUsingPOST1Created), nil

}

/*
GetAllCustomerGroupsUsingGET gets all subgroups of a customergroup

Returns all customer groups that are direct subgroups of a customergroup.

To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
*/
func (a *Client) GetAllCustomerGroupsUsingGET(params *GetAllCustomerGroupsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllCustomerGroupsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCustomerGroupsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllCustomerGroupsUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/customergroups",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllCustomerGroupsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllCustomerGroupsUsingGETOK), nil

}

/*
GetCustomerGroupUsingGET gets a specific customer group

Returns a customer group with a specific groupId.

To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
*/
func (a *Client) GetCustomerGroupUsingGET(params *GetCustomerGroupUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomerGroupUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerGroupUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomerGroupUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/customergroups/{groupId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomerGroupUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomerGroupUsingGETOK), nil

}

/*
RemoveUsersFromCustomerGroupUsingDELETE deletes a user from a customer group

Removes user from a customer group.

To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
*/
func (a *Client) RemoveUsersFromCustomerGroupUsingDELETE(params *RemoveUsersFromCustomerGroupUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveUsersFromCustomerGroupUsingDELETEOK, *RemoveUsersFromCustomerGroupUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUsersFromCustomerGroupUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeUsersFromCustomerGroupUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/{baseSiteId}/customergroups/{groupId}/members/{userId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveUsersFromCustomerGroupUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemoveUsersFromCustomerGroupUsingDELETEOK:
		return value, nil, nil
	case *RemoveUsersFromCustomerGroupUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SetUserListForCustomerGroupUsingPUT1 sets members for a user group

Sets members for a user group. The list of existing members is overwritten with a new one.

To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
*/
func (a *Client) SetUserListForCustomerGroupUsingPUT1(params *SetUserListForCustomerGroupUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter) (*SetUserListForCustomerGroupUsingPUT1OK, *SetUserListForCustomerGroupUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUserListForCustomerGroupUsingPUT1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setUserListForCustomerGroupUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/{baseSiteId}/customergroups/{groupId}/members",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetUserListForCustomerGroupUsingPUT1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SetUserListForCustomerGroupUsingPUT1OK:
		return value, nil, nil
	case *SetUserListForCustomerGroupUsingPUT1Created:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
