// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"golang.org/x/net/context"
)

// NewWithdrawConsentUsingDELETEParams creates a new WithdrawConsentUsingDELETEParams object
// with the default values initialized.
func NewWithdrawConsentUsingDELETEParams() *WithdrawConsentUsingDELETEParams {
	var ()
	return &WithdrawConsentUsingDELETEParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWithdrawConsentUsingDELETEParamsWithTimeout creates a new WithdrawConsentUsingDELETEParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWithdrawConsentUsingDELETEParamsWithTimeout(timeout time.Duration) *WithdrawConsentUsingDELETEParams {
	var ()
	return &WithdrawConsentUsingDELETEParams{

		timeout: timeout,
	}
}

// NewWithdrawConsentUsingDELETEParamsWithContext creates a new WithdrawConsentUsingDELETEParams object
// with the default values initialized, and the ability to set a context for a request
func NewWithdrawConsentUsingDELETEParamsWithContext(ctx context.Context) *WithdrawConsentUsingDELETEParams {
	var ()
	return &WithdrawConsentUsingDELETEParams{

		Context: ctx,
	}
}

// NewWithdrawConsentUsingDELETEParamsWithHTTPClient creates a new WithdrawConsentUsingDELETEParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWithdrawConsentUsingDELETEParamsWithHTTPClient(client *http.Client) *WithdrawConsentUsingDELETEParams {
	var ()
	return &WithdrawConsentUsingDELETEParams{
		HTTPClient: client,
	}
}

/*WithdrawConsentUsingDELETEParams contains all the parameters to send to the API endpoint
for the withdraw consent using d e l e t e operation typically these are written to a http.Request
*/
type WithdrawConsentUsingDELETEParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*ConsentCode
	  consentCode

	*/
	ConsentCode string
	/*UserID
	  User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) WithTimeout(timeout time.Duration) *WithdrawConsentUsingDELETEParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) WithContext(ctx context.Context) *WithdrawConsentUsingDELETEParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) WithHTTPClient(client *http.Client) *WithdrawConsentUsingDELETEParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) WithBaseSiteID(baseSiteID string) *WithdrawConsentUsingDELETEParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithConsentCode adds the consentCode to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) WithConsentCode(consentCode string) *WithdrawConsentUsingDELETEParams {
	o.SetConsentCode(consentCode)
	return o
}

// SetConsentCode adds the consentCode to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) SetConsentCode(consentCode string) {
	o.ConsentCode = consentCode
}

// WithUserID adds the userID to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) WithUserID(userID string) *WithdrawConsentUsingDELETEParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the withdraw consent using d e l e t e params
func (o *WithdrawConsentUsingDELETEParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *WithdrawConsentUsingDELETEParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	// path param consentCode
	if err := r.SetPathParam("consentCode", o.ConsentCode); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
