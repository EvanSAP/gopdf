// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new consents API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for consents API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetConsentTemplateUsingGET fetches the consent

If user has not given or withdrawn consent to the template, no given or withdraw date is returned.
*/
func (a *Client) GetConsentTemplateUsingGET(params *GetConsentTemplateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetConsentTemplateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsentTemplateUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConsentTemplateUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/consenttemplates/{consentTemplateId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsentTemplateUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConsentTemplateUsingGETOK), nil

}

/*
GetConsentTemplatesUsingGET fetches the list of consents

If user has not given or withdrawn consent to any of the template, no given or withdraw date is returned.
*/
func (a *Client) GetConsentTemplatesUsingGET(params *GetConsentTemplatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetConsentTemplatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsentTemplatesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConsentTemplatesUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/consenttemplates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsentTemplatesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConsentTemplatesUsingGETOK), nil

}

/*
GiveConsentUsingPOST as user can give consent
*/
func (a *Client) GiveConsentUsingPOST(params *GiveConsentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GiveConsentUsingPOSTOK, *GiveConsentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiveConsentUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "giveConsentUsingPOST",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/consents",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GiveConsentUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GiveConsentUsingPOSTOK:
		return value, nil, nil
	case *GiveConsentUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
WithdrawConsentUsingDELETE withdraws the user consent for a given consent code

If the user consent was given, the consent is withdrawn. If consent was already withdrawn then returns consent already withdrawn error. If there is no such consent then returns not found. If the current user is an anonymous user then returns access denied error.
*/
func (a *Client) WithdrawConsentUsingDELETE(params *WithdrawConsentUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*WithdrawConsentUsingDELETEOK, *WithdrawConsentUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWithdrawConsentUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "withdrawConsentUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/{baseSiteId}/users/{userId}/consents/{consentCode}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WithdrawConsentUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *WithdrawConsentUsingDELETEOK:
		return value, nil, nil
	case *WithdrawConsentUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
