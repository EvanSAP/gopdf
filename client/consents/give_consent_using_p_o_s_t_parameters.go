// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"golang.org/x/net/context"
)

// NewGiveConsentUsingPOSTParams creates a new GiveConsentUsingPOSTParams object
// with the default values initialized.
func NewGiveConsentUsingPOSTParams() *GiveConsentUsingPOSTParams {
	var ()
	return &GiveConsentUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGiveConsentUsingPOSTParamsWithTimeout creates a new GiveConsentUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGiveConsentUsingPOSTParamsWithTimeout(timeout time.Duration) *GiveConsentUsingPOSTParams {
	var ()
	return &GiveConsentUsingPOSTParams{

		timeout: timeout,
	}
}

// NewGiveConsentUsingPOSTParamsWithContext creates a new GiveConsentUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewGiveConsentUsingPOSTParamsWithContext(ctx context.Context) *GiveConsentUsingPOSTParams {
	var ()
	return &GiveConsentUsingPOSTParams{

		Context: ctx,
	}
}

// NewGiveConsentUsingPOSTParamsWithHTTPClient creates a new GiveConsentUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGiveConsentUsingPOSTParamsWithHTTPClient(client *http.Client) *GiveConsentUsingPOSTParams {
	var ()
	return &GiveConsentUsingPOSTParams{
		HTTPClient: client,
	}
}

/*GiveConsentUsingPOSTParams contains all the parameters to send to the API endpoint
for the give consent using p o s t operation typically these are written to a http.Request
*/
type GiveConsentUsingPOSTParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*ConsentTemplateID
	  Consent template ID.

	*/
	ConsentTemplateID string
	/*ConsentTemplateVersion
	  Consent template version.

	*/
	ConsentTemplateVersion int32
	/*UserID
	  User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) WithTimeout(timeout time.Duration) *GiveConsentUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) WithContext(ctx context.Context) *GiveConsentUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) WithHTTPClient(client *http.Client) *GiveConsentUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) WithBaseSiteID(baseSiteID string) *GiveConsentUsingPOSTParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithConsentTemplateID adds the consentTemplateID to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) WithConsentTemplateID(consentTemplateID string) *GiveConsentUsingPOSTParams {
	o.SetConsentTemplateID(consentTemplateID)
	return o
}

// SetConsentTemplateID adds the consentTemplateId to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) SetConsentTemplateID(consentTemplateID string) {
	o.ConsentTemplateID = consentTemplateID
}

// WithConsentTemplateVersion adds the consentTemplateVersion to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) WithConsentTemplateVersion(consentTemplateVersion int32) *GiveConsentUsingPOSTParams {
	o.SetConsentTemplateVersion(consentTemplateVersion)
	return o
}

// SetConsentTemplateVersion adds the consentTemplateVersion to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) SetConsentTemplateVersion(consentTemplateVersion int32) {
	o.ConsentTemplateVersion = consentTemplateVersion
}

// WithUserID adds the userID to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) WithUserID(userID string) *GiveConsentUsingPOSTParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the give consent using p o s t params
func (o *GiveConsentUsingPOSTParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GiveConsentUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	// query param consentTemplateId
	qrConsentTemplateID := o.ConsentTemplateID
	qConsentTemplateID := qrConsentTemplateID
	if qConsentTemplateID != "" {
		if err := r.SetQueryParam("consentTemplateId", qConsentTemplateID); err != nil {
			return err
		}
	}

	// query param consentTemplateVersion
	qrConsentTemplateVersion := o.ConsentTemplateVersion
	qConsentTemplateVersion := swag.FormatInt32(qrConsentTemplateVersion)
	if qConsentTemplateVersion != "" {
		if err := r.SetQueryParam("consentTemplateVersion", qConsentTemplateVersion); err != nil {
			return err
		}
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
