// Code generated by go-swagger; DO NOT EDIT.

package countries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetCountriesUsingGETReader is a Reader for the GetCountriesUsingGET structure.
type GetCountriesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCountriesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCountriesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetCountriesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetCountriesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCountriesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCountriesUsingGETOK creates a GetCountriesUsingGETOK with default headers values
func NewGetCountriesUsingGETOK() *GetCountriesUsingGETOK {
	return &GetCountriesUsingGETOK{}
}

/*GetCountriesUsingGETOK handles this case with default header values.

OK
*/
type GetCountriesUsingGETOK struct {
	Payload *models.CountryListWsDTO
}

func (o *GetCountriesUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/countries][%d] getCountriesUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetCountriesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CountryListWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCountriesUsingGETUnauthorized creates a GetCountriesUsingGETUnauthorized with default headers values
func NewGetCountriesUsingGETUnauthorized() *GetCountriesUsingGETUnauthorized {
	return &GetCountriesUsingGETUnauthorized{}
}

/*GetCountriesUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCountriesUsingGETUnauthorized struct {
}

func (o *GetCountriesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/countries][%d] getCountriesUsingGETUnauthorized ", 401)
}

func (o *GetCountriesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCountriesUsingGETForbidden creates a GetCountriesUsingGETForbidden with default headers values
func NewGetCountriesUsingGETForbidden() *GetCountriesUsingGETForbidden {
	return &GetCountriesUsingGETForbidden{}
}

/*GetCountriesUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetCountriesUsingGETForbidden struct {
}

func (o *GetCountriesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/countries][%d] getCountriesUsingGETForbidden ", 403)
}

func (o *GetCountriesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCountriesUsingGETNotFound creates a GetCountriesUsingGETNotFound with default headers values
func NewGetCountriesUsingGETNotFound() *GetCountriesUsingGETNotFound {
	return &GetCountriesUsingGETNotFound{}
}

/*GetCountriesUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetCountriesUsingGETNotFound struct {
}

func (o *GetCountriesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/countries][%d] getCountriesUsingGETNotFound ", 404)
}

func (o *GetCountriesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
