// Code generated by go-swagger; DO NOT EDIT.

package countries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new countries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for countries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCountriesUsingGET gets a list of countries

If the value of type equals to shipping, then return shipping countries. If the value of type equals to billing, then return billing countries. If the value of type is not given, return all countries. The list is sorted alphabetically.
*/
func (a *Client) GetCountriesUsingGET(params *GetCountriesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCountriesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCountriesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCountriesUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/countries",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCountriesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCountriesUsingGETOK), nil

}

/*
GetRegionsForCountryUsingGET fetches the list of regions for the provided country

Lists all regions
*/
func (a *Client) GetRegionsForCountryUsingGET(params *GetRegionsForCountryUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegionsForCountryUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionsForCountryUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegionsForCountryUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/countries/{countyIsoCode}/regions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRegionsForCountryUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionsForCountryUsingGETOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
