// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// UpdateUserUsingPATCH1Reader is a Reader for the UpdateUserUsingPATCH1 structure.
type UpdateUserUsingPATCH1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserUsingPATCH1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateUserUsingPATCH1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUpdateUserUsingPATCH1NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateUserUsingPATCH1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateUserUsingPATCH1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateUserUsingPATCH1OK creates a UpdateUserUsingPATCH1OK with default headers values
func NewUpdateUserUsingPATCH1OK() *UpdateUserUsingPATCH1OK {
	return &UpdateUserUsingPATCH1OK{}
}

/*UpdateUserUsingPATCH1OK handles this case with default header values.

OK
*/
type UpdateUserUsingPATCH1OK struct {
}

func (o *UpdateUserUsingPATCH1OK) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}][%d] updateUserUsingPATCH1OK ", 200)
}

func (o *UpdateUserUsingPATCH1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserUsingPATCH1NoContent creates a UpdateUserUsingPATCH1NoContent with default headers values
func NewUpdateUserUsingPATCH1NoContent() *UpdateUserUsingPATCH1NoContent {
	return &UpdateUserUsingPATCH1NoContent{}
}

/*UpdateUserUsingPATCH1NoContent handles this case with default header values.

No Content
*/
type UpdateUserUsingPATCH1NoContent struct {
}

func (o *UpdateUserUsingPATCH1NoContent) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}][%d] updateUserUsingPATCH1NoContent ", 204)
}

func (o *UpdateUserUsingPATCH1NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserUsingPATCH1Unauthorized creates a UpdateUserUsingPATCH1Unauthorized with default headers values
func NewUpdateUserUsingPATCH1Unauthorized() *UpdateUserUsingPATCH1Unauthorized {
	return &UpdateUserUsingPATCH1Unauthorized{}
}

/*UpdateUserUsingPATCH1Unauthorized handles this case with default header values.

Unauthorized
*/
type UpdateUserUsingPATCH1Unauthorized struct {
}

func (o *UpdateUserUsingPATCH1Unauthorized) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}][%d] updateUserUsingPATCH1Unauthorized ", 401)
}

func (o *UpdateUserUsingPATCH1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserUsingPATCH1Forbidden creates a UpdateUserUsingPATCH1Forbidden with default headers values
func NewUpdateUserUsingPATCH1Forbidden() *UpdateUserUsingPATCH1Forbidden {
	return &UpdateUserUsingPATCH1Forbidden{}
}

/*UpdateUserUsingPATCH1Forbidden handles this case with default header values.

Forbidden
*/
type UpdateUserUsingPATCH1Forbidden struct {
}

func (o *UpdateUserUsingPATCH1Forbidden) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}][%d] updateUserUsingPATCH1Forbidden ", 403)
}

func (o *UpdateUserUsingPATCH1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
