// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"golang.org/x/net/context"
)

// NewGetComponentByIDUsingGETParams creates a new GetComponentByIDUsingGETParams object
// with the default values initialized.
func NewGetComponentByIDUsingGETParams() *GetComponentByIDUsingGETParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &GetComponentByIDUsingGETParams{
		Fields: &fieldsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetComponentByIDUsingGETParamsWithTimeout creates a new GetComponentByIDUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetComponentByIDUsingGETParamsWithTimeout(timeout time.Duration) *GetComponentByIDUsingGETParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &GetComponentByIDUsingGETParams{
		Fields: &fieldsDefault,

		timeout: timeout,
	}
}

// NewGetComponentByIDUsingGETParamsWithContext creates a new GetComponentByIDUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetComponentByIDUsingGETParamsWithContext(ctx context.Context) *GetComponentByIDUsingGETParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &GetComponentByIDUsingGETParams{
		Fields: &fieldsDefault,

		Context: ctx,
	}
}

// NewGetComponentByIDUsingGETParamsWithHTTPClient creates a new GetComponentByIDUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetComponentByIDUsingGETParamsWithHTTPClient(client *http.Client) *GetComponentByIDUsingGETParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &GetComponentByIDUsingGETParams{
		Fields:     &fieldsDefault,
		HTTPClient: client,
	}
}

/*GetComponentByIDUsingGETParams contains all the parameters to send to the API endpoint
for the get component by Id using g e t operation typically these are written to a http.Request
*/
type GetComponentByIDUsingGETParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*CatalogCode
	  Catalog code

	*/
	CatalogCode *string
	/*CategoryCode
	  Category code

	*/
	CategoryCode *string
	/*ComponentID
	  Component identifier

	*/
	ComponentID string
	/*Fields
	  Response configuration (list of fields, which should be returned in response)

	*/
	Fields *string
	/*ProductCode
	  Product code

	*/
	ProductCode *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) WithTimeout(timeout time.Duration) *GetComponentByIDUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) WithContext(ctx context.Context) *GetComponentByIDUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) WithHTTPClient(client *http.Client) *GetComponentByIDUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) WithBaseSiteID(baseSiteID string) *GetComponentByIDUsingGETParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithCatalogCode adds the catalogCode to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) WithCatalogCode(catalogCode *string) *GetComponentByIDUsingGETParams {
	o.SetCatalogCode(catalogCode)
	return o
}

// SetCatalogCode adds the catalogCode to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) SetCatalogCode(catalogCode *string) {
	o.CatalogCode = catalogCode
}

// WithCategoryCode adds the categoryCode to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) WithCategoryCode(categoryCode *string) *GetComponentByIDUsingGETParams {
	o.SetCategoryCode(categoryCode)
	return o
}

// SetCategoryCode adds the categoryCode to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) SetCategoryCode(categoryCode *string) {
	o.CategoryCode = categoryCode
}

// WithComponentID adds the componentID to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) WithComponentID(componentID string) *GetComponentByIDUsingGETParams {
	o.SetComponentID(componentID)
	return o
}

// SetComponentID adds the componentId to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) SetComponentID(componentID string) {
	o.ComponentID = componentID
}

// WithFields adds the fields to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) WithFields(fields *string) *GetComponentByIDUsingGETParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithProductCode adds the productCode to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) WithProductCode(productCode *string) *GetComponentByIDUsingGETParams {
	o.SetProductCode(productCode)
	return o
}

// SetProductCode adds the productCode to the get component by Id using g e t params
func (o *GetComponentByIDUsingGETParams) SetProductCode(productCode *string) {
	o.ProductCode = productCode
}

// WriteToRequest writes these params to a swagger request
func (o *GetComponentByIDUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	if o.CatalogCode != nil {

		// query param catalogCode
		var qrCatalogCode string
		if o.CatalogCode != nil {
			qrCatalogCode = *o.CatalogCode
		}
		qCatalogCode := qrCatalogCode
		if qCatalogCode != "" {
			if err := r.SetQueryParam("catalogCode", qCatalogCode); err != nil {
				return err
			}
		}

	}

	if o.CategoryCode != nil {

		// query param categoryCode
		var qrCategoryCode string
		if o.CategoryCode != nil {
			qrCategoryCode = *o.CategoryCode
		}
		qCategoryCode := qrCategoryCode
		if qCategoryCode != "" {
			if err := r.SetQueryParam("categoryCode", qCategoryCode); err != nil {
				return err
			}
		}

	}

	// path param componentId
	if err := r.SetPathParam("componentId", o.ComponentID); err != nil {
		return err
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.ProductCode != nil {

		// query param productCode
		var qrProductCode string
		if o.ProductCode != nil {
			qrProductCode = *o.ProductCode
		}
		qProductCode := qrProductCode
		if qProductCode != "" {
			if err := r.SetQueryParam("productCode", qProductCode); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
