// Code generated by go-swagger; DO NOT EDIT.

package merchant_callback

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"golang.org/x/net/context"
)

// NewHandleMerchantCallbackUsingPOSTParams creates a new HandleMerchantCallbackUsingPOSTParams object
// with the default values initialized.
func NewHandleMerchantCallbackUsingPOSTParams() *HandleMerchantCallbackUsingPOSTParams {
	var ()
	return &HandleMerchantCallbackUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewHandleMerchantCallbackUsingPOSTParamsWithTimeout creates a new HandleMerchantCallbackUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHandleMerchantCallbackUsingPOSTParamsWithTimeout(timeout time.Duration) *HandleMerchantCallbackUsingPOSTParams {
	var ()
	return &HandleMerchantCallbackUsingPOSTParams{

		timeout: timeout,
	}
}

// NewHandleMerchantCallbackUsingPOSTParamsWithContext creates a new HandleMerchantCallbackUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewHandleMerchantCallbackUsingPOSTParamsWithContext(ctx context.Context) *HandleMerchantCallbackUsingPOSTParams {
	var ()
	return &HandleMerchantCallbackUsingPOSTParams{

		Context: ctx,
	}
}

// NewHandleMerchantCallbackUsingPOSTParamsWithHTTPClient creates a new HandleMerchantCallbackUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHandleMerchantCallbackUsingPOSTParamsWithHTTPClient(client *http.Client) *HandleMerchantCallbackUsingPOSTParams {
	var ()
	return &HandleMerchantCallbackUsingPOSTParams{
		HTTPClient: client,
	}
}

/*HandleMerchantCallbackUsingPOSTParams contains all the parameters to send to the API endpoint
for the handle merchant callback using p o s t operation typically these are written to a http.Request
*/
type HandleMerchantCallbackUsingPOSTParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the handle merchant callback using p o s t params
func (o *HandleMerchantCallbackUsingPOSTParams) WithTimeout(timeout time.Duration) *HandleMerchantCallbackUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the handle merchant callback using p o s t params
func (o *HandleMerchantCallbackUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the handle merchant callback using p o s t params
func (o *HandleMerchantCallbackUsingPOSTParams) WithContext(ctx context.Context) *HandleMerchantCallbackUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the handle merchant callback using p o s t params
func (o *HandleMerchantCallbackUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the handle merchant callback using p o s t params
func (o *HandleMerchantCallbackUsingPOSTParams) WithHTTPClient(client *http.Client) *HandleMerchantCallbackUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the handle merchant callback using p o s t params
func (o *HandleMerchantCallbackUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the handle merchant callback using p o s t params
func (o *HandleMerchantCallbackUsingPOSTParams) WithBaseSiteID(baseSiteID string) *HandleMerchantCallbackUsingPOSTParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the handle merchant callback using p o s t params
func (o *HandleMerchantCallbackUsingPOSTParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WriteToRequest writes these params to a swagger request
func (o *HandleMerchantCallbackUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
