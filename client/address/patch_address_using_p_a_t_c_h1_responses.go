// Code generated by go-swagger; DO NOT EDIT.

package address

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// PatchAddressUsingPATCH1Reader is a Reader for the PatchAddressUsingPATCH1 structure.
type PatchAddressUsingPATCH1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAddressUsingPATCH1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchAddressUsingPATCH1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewPatchAddressUsingPATCH1NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchAddressUsingPATCH1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchAddressUsingPATCH1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchAddressUsingPATCH1OK creates a PatchAddressUsingPATCH1OK with default headers values
func NewPatchAddressUsingPATCH1OK() *PatchAddressUsingPATCH1OK {
	return &PatchAddressUsingPATCH1OK{}
}

/*PatchAddressUsingPATCH1OK handles this case with default header values.

OK
*/
type PatchAddressUsingPATCH1OK struct {
}

func (o *PatchAddressUsingPATCH1OK) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}/addresses/{addressId}][%d] patchAddressUsingPATCH1OK ", 200)
}

func (o *PatchAddressUsingPATCH1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchAddressUsingPATCH1NoContent creates a PatchAddressUsingPATCH1NoContent with default headers values
func NewPatchAddressUsingPATCH1NoContent() *PatchAddressUsingPATCH1NoContent {
	return &PatchAddressUsingPATCH1NoContent{}
}

/*PatchAddressUsingPATCH1NoContent handles this case with default header values.

No Content
*/
type PatchAddressUsingPATCH1NoContent struct {
}

func (o *PatchAddressUsingPATCH1NoContent) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}/addresses/{addressId}][%d] patchAddressUsingPATCH1NoContent ", 204)
}

func (o *PatchAddressUsingPATCH1NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchAddressUsingPATCH1Unauthorized creates a PatchAddressUsingPATCH1Unauthorized with default headers values
func NewPatchAddressUsingPATCH1Unauthorized() *PatchAddressUsingPATCH1Unauthorized {
	return &PatchAddressUsingPATCH1Unauthorized{}
}

/*PatchAddressUsingPATCH1Unauthorized handles this case with default header values.

Unauthorized
*/
type PatchAddressUsingPATCH1Unauthorized struct {
}

func (o *PatchAddressUsingPATCH1Unauthorized) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}/addresses/{addressId}][%d] patchAddressUsingPATCH1Unauthorized ", 401)
}

func (o *PatchAddressUsingPATCH1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchAddressUsingPATCH1Forbidden creates a PatchAddressUsingPATCH1Forbidden with default headers values
func NewPatchAddressUsingPATCH1Forbidden() *PatchAddressUsingPATCH1Forbidden {
	return &PatchAddressUsingPATCH1Forbidden{}
}

/*PatchAddressUsingPATCH1Forbidden handles this case with default header values.

Forbidden
*/
type PatchAddressUsingPATCH1Forbidden struct {
}

func (o *PatchAddressUsingPATCH1Forbidden) Error() string {
	return fmt.Sprintf("[PATCH /{baseSiteId}/users/{userId}/addresses/{addressId}][%d] patchAddressUsingPATCH1Forbidden ", 403)
}

func (o *PatchAddressUsingPATCH1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
