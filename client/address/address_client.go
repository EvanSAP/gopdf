// Code generated by go-swagger; DO NOT EDIT.

package address

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new address API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for address API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAddressUsingPOST1 creates a new address

Creates a new address.
*/
func (a *Client) CreateAddressUsingPOST1(params *CreateAddressUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter) (*CreateAddressUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAddressUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAddressUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/addresses",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAddressUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAddressUsingPOST1Created), nil

}

/*
DeleteAddressUsingDELETE deletes customer s address

Removes customer's address.
*/
func (a *Client) DeleteAddressUsingDELETE(params *DeleteAddressUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAddressUsingDELETEOK, *DeleteAddressUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAddressUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAddressUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/{baseSiteId}/users/{userId}/addresses/{addressId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAddressUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAddressUsingDELETEOK:
		return value, nil, nil
	case *DeleteAddressUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetAddressUsingGET gets info about address

Returns detailed information about address with a given id.
*/
func (a *Client) GetAddressUsingGET(params *GetAddressUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAddressUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAddressUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAddressUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/addresses/{addressId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAddressUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAddressUsingGETOK), nil

}

/*
GetAddressesUsingGET gets customer s addresses

Returns customer's addresses.
*/
func (a *Client) GetAddressesUsingGET(params *GetAddressesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAddressesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAddressesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAddressesUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/addresses",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAddressesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAddressesUsingGETOK), nil

}

/*
PatchAddressUsingPATCH1 updates the address

Updates the address. Only attributes provided in the request body will be changed.
*/
func (a *Client) PatchAddressUsingPATCH1(params *PatchAddressUsingPATCH1Params, authInfo runtime.ClientAuthInfoWriter) (*PatchAddressUsingPATCH1OK, *PatchAddressUsingPATCH1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAddressUsingPATCH1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAddressUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/{baseSiteId}/users/{userId}/addresses/{addressId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAddressUsingPATCH1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchAddressUsingPATCH1OK:
		return value, nil, nil
	case *PatchAddressUsingPATCH1NoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PutAddressUsingPUT1 updates the address

Updates the address. Attributes not provided in the request will be defined again (set to null or default).
*/
func (a *Client) PutAddressUsingPUT1(params *PutAddressUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter) (*PutAddressUsingPUT1OK, *PutAddressUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAddressUsingPUT1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAddressUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/{baseSiteId}/users/{userId}/addresses/{addressId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAddressUsingPUT1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PutAddressUsingPUT1OK:
		return value, nil, nil
	case *PutAddressUsingPUT1Created:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
VerifyAddressUsingPOST1 verifies address

Verifies address.
*/
func (a *Client) VerifyAddressUsingPOST1(params *VerifyAddressUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter) (*VerifyAddressUsingPOST1OK, *VerifyAddressUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyAddressUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verifyAddressUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/addresses/verification",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VerifyAddressUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VerifyAddressUsingPOST1OK:
		return value, nil, nil
	case *VerifyAddressUsingPOST1Created:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
