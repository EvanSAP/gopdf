// Code generated by go-swagger; DO NOT EDIT.

package base_stores

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetBaseStoreUsingGETReader is a Reader for the GetBaseStoreUsingGET structure.
type GetBaseStoreUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBaseStoreUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetBaseStoreUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetBaseStoreUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetBaseStoreUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetBaseStoreUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetBaseStoreUsingGETOK creates a GetBaseStoreUsingGETOK with default headers values
func NewGetBaseStoreUsingGETOK() *GetBaseStoreUsingGETOK {
	return &GetBaseStoreUsingGETOK{}
}

/*GetBaseStoreUsingGETOK handles this case with default header values.

OK
*/
type GetBaseStoreUsingGETOK struct {
	Payload *models.BaseStoreWsDTO
}

func (o *GetBaseStoreUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/basestores/{baseStoreUid}][%d] getBaseStoreUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetBaseStoreUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BaseStoreWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBaseStoreUsingGETUnauthorized creates a GetBaseStoreUsingGETUnauthorized with default headers values
func NewGetBaseStoreUsingGETUnauthorized() *GetBaseStoreUsingGETUnauthorized {
	return &GetBaseStoreUsingGETUnauthorized{}
}

/*GetBaseStoreUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetBaseStoreUsingGETUnauthorized struct {
}

func (o *GetBaseStoreUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/basestores/{baseStoreUid}][%d] getBaseStoreUsingGETUnauthorized ", 401)
}

func (o *GetBaseStoreUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBaseStoreUsingGETForbidden creates a GetBaseStoreUsingGETForbidden with default headers values
func NewGetBaseStoreUsingGETForbidden() *GetBaseStoreUsingGETForbidden {
	return &GetBaseStoreUsingGETForbidden{}
}

/*GetBaseStoreUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetBaseStoreUsingGETForbidden struct {
}

func (o *GetBaseStoreUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/basestores/{baseStoreUid}][%d] getBaseStoreUsingGETForbidden ", 403)
}

func (o *GetBaseStoreUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBaseStoreUsingGETNotFound creates a GetBaseStoreUsingGETNotFound with default headers values
func NewGetBaseStoreUsingGETNotFound() *GetBaseStoreUsingGETNotFound {
	return &GetBaseStoreUsingGETNotFound{}
}

/*GetBaseStoreUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetBaseStoreUsingGETNotFound struct {
}

func (o *GetBaseStoreUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/basestores/{baseStoreUid}][%d] getBaseStoreUsingGETNotFound ", 404)
}

func (o *GetBaseStoreUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
