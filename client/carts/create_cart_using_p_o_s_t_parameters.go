// Code generated by go-swagger; DO NOT EDIT.

package carts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"golang.org/x/net/context"
)

// NewCreateCartUsingPOSTParams creates a new CreateCartUsingPOSTParams object
// with the default values initialized.
func NewCreateCartUsingPOSTParams() *CreateCartUsingPOSTParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &CreateCartUsingPOSTParams{
		Fields: &fieldsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateCartUsingPOSTParamsWithTimeout creates a new CreateCartUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateCartUsingPOSTParamsWithTimeout(timeout time.Duration) *CreateCartUsingPOSTParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &CreateCartUsingPOSTParams{
		Fields: &fieldsDefault,

		timeout: timeout,
	}
}

// NewCreateCartUsingPOSTParamsWithContext creates a new CreateCartUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateCartUsingPOSTParamsWithContext(ctx context.Context) *CreateCartUsingPOSTParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &CreateCartUsingPOSTParams{
		Fields: &fieldsDefault,

		Context: ctx,
	}
}

// NewCreateCartUsingPOSTParamsWithHTTPClient creates a new CreateCartUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateCartUsingPOSTParamsWithHTTPClient(client *http.Client) *CreateCartUsingPOSTParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &CreateCartUsingPOSTParams{
		Fields:     &fieldsDefault,
		HTTPClient: client,
	}
}

/*CreateCartUsingPOSTParams contains all the parameters to send to the API endpoint
for the create cart using p o s t operation typically these are written to a http.Request
*/
type CreateCartUsingPOSTParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*Fields
	  Response configuration. This is the list of fields that should be returned in the response body.

	*/
	Fields *string
	/*OldCartID
	  Anonymous cart GUID.

	*/
	OldCartID *string
	/*ToMergeCartGUID
	  The GUID of the user's cart that will be merged with the anonymous cart.

	*/
	ToMergeCartGUID *string
	/*UserID
	  User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) WithTimeout(timeout time.Duration) *CreateCartUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) WithContext(ctx context.Context) *CreateCartUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) WithHTTPClient(client *http.Client) *CreateCartUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) WithBaseSiteID(baseSiteID string) *CreateCartUsingPOSTParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithFields adds the fields to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) WithFields(fields *string) *CreateCartUsingPOSTParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithOldCartID adds the oldCartID to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) WithOldCartID(oldCartID *string) *CreateCartUsingPOSTParams {
	o.SetOldCartID(oldCartID)
	return o
}

// SetOldCartID adds the oldCartId to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) SetOldCartID(oldCartID *string) {
	o.OldCartID = oldCartID
}

// WithToMergeCartGUID adds the toMergeCartGUID to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) WithToMergeCartGUID(toMergeCartGUID *string) *CreateCartUsingPOSTParams {
	o.SetToMergeCartGUID(toMergeCartGUID)
	return o
}

// SetToMergeCartGUID adds the toMergeCartGuid to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) SetToMergeCartGUID(toMergeCartGUID *string) {
	o.ToMergeCartGUID = toMergeCartGUID
}

// WithUserID adds the userID to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) WithUserID(userID string) *CreateCartUsingPOSTParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the create cart using p o s t params
func (o *CreateCartUsingPOSTParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateCartUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.OldCartID != nil {

		// query param oldCartId
		var qrOldCartID string
		if o.OldCartID != nil {
			qrOldCartID = *o.OldCartID
		}
		qOldCartID := qrOldCartID
		if qOldCartID != "" {
			if err := r.SetQueryParam("oldCartId", qOldCartID); err != nil {
				return err
			}
		}

	}

	if o.ToMergeCartGUID != nil {

		// query param toMergeCartGuid
		var qrToMergeCartGUID string
		if o.ToMergeCartGUID != nil {
			qrToMergeCartGUID = *o.ToMergeCartGUID
		}
		qToMergeCartGUID := qrToMergeCartGUID
		if qToMergeCartGUID != "" {
			if err := r.SetQueryParam("toMergeCartGuid", qToMergeCartGUID); err != nil {
				return err
			}
		}

	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
