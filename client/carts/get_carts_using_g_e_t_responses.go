// Code generated by go-swagger; DO NOT EDIT.

package carts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/gopdf/models"
)

// GetCartsUsingGETReader is a Reader for the GetCartsUsingGET structure.
type GetCartsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCartsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCartsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetCartsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetCartsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCartsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCartsUsingGETOK creates a GetCartsUsingGETOK with default headers values
func NewGetCartsUsingGETOK() *GetCartsUsingGETOK {
	return &GetCartsUsingGETOK{}
}

/*GetCartsUsingGETOK handles this case with default header values.

OK
*/
type GetCartsUsingGETOK struct {
	Payload *models.CartListWsDTO
}

func (o *GetCartsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/carts][%d] getCartsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetCartsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CartListWsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCartsUsingGETUnauthorized creates a GetCartsUsingGETUnauthorized with default headers values
func NewGetCartsUsingGETUnauthorized() *GetCartsUsingGETUnauthorized {
	return &GetCartsUsingGETUnauthorized{}
}

/*GetCartsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCartsUsingGETUnauthorized struct {
}

func (o *GetCartsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/carts][%d] getCartsUsingGETUnauthorized ", 401)
}

func (o *GetCartsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCartsUsingGETForbidden creates a GetCartsUsingGETForbidden with default headers values
func NewGetCartsUsingGETForbidden() *GetCartsUsingGETForbidden {
	return &GetCartsUsingGETForbidden{}
}

/*GetCartsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetCartsUsingGETForbidden struct {
}

func (o *GetCartsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/carts][%d] getCartsUsingGETForbidden ", 403)
}

func (o *GetCartsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCartsUsingGETNotFound creates a GetCartsUsingGETNotFound with default headers values
func NewGetCartsUsingGETNotFound() *GetCartsUsingGETNotFound {
	return &GetCartsUsingGETNotFound{}
}

/*GetCartsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetCartsUsingGETNotFound struct {
}

func (o *GetCartsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /{baseSiteId}/users/{userId}/carts][%d] getCartsUsingGETNotFound ", 404)
}

func (o *GetCartsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
