// Code generated by go-swagger; DO NOT EDIT.

package carts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"golang.org/x/net/context"
)

// NewSetCartDeliveryModeUsingPUTParams creates a new SetCartDeliveryModeUsingPUTParams object
// with the default values initialized.
func NewSetCartDeliveryModeUsingPUTParams() *SetCartDeliveryModeUsingPUTParams {
	var ()
	return &SetCartDeliveryModeUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetCartDeliveryModeUsingPUTParamsWithTimeout creates a new SetCartDeliveryModeUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetCartDeliveryModeUsingPUTParamsWithTimeout(timeout time.Duration) *SetCartDeliveryModeUsingPUTParams {
	var ()
	return &SetCartDeliveryModeUsingPUTParams{

		timeout: timeout,
	}
}

// NewSetCartDeliveryModeUsingPUTParamsWithContext creates a new SetCartDeliveryModeUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetCartDeliveryModeUsingPUTParamsWithContext(ctx context.Context) *SetCartDeliveryModeUsingPUTParams {
	var ()
	return &SetCartDeliveryModeUsingPUTParams{

		Context: ctx,
	}
}

// NewSetCartDeliveryModeUsingPUTParamsWithHTTPClient creates a new SetCartDeliveryModeUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetCartDeliveryModeUsingPUTParamsWithHTTPClient(client *http.Client) *SetCartDeliveryModeUsingPUTParams {
	var ()
	return &SetCartDeliveryModeUsingPUTParams{
		HTTPClient: client,
	}
}

/*SetCartDeliveryModeUsingPUTParams contains all the parameters to send to the API endpoint
for the set cart delivery mode using p u t operation typically these are written to a http.Request
*/
type SetCartDeliveryModeUsingPUTParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*CartID
	  Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart

	*/
	CartID string
	/*DeliveryModeID
	  Delivery mode identifier (code)

	*/
	DeliveryModeID string
	/*UserID
	  User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) WithTimeout(timeout time.Duration) *SetCartDeliveryModeUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) WithContext(ctx context.Context) *SetCartDeliveryModeUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) WithHTTPClient(client *http.Client) *SetCartDeliveryModeUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) WithBaseSiteID(baseSiteID string) *SetCartDeliveryModeUsingPUTParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithCartID adds the cartID to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) WithCartID(cartID string) *SetCartDeliveryModeUsingPUTParams {
	o.SetCartID(cartID)
	return o
}

// SetCartID adds the cartId to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) SetCartID(cartID string) {
	o.CartID = cartID
}

// WithDeliveryModeID adds the deliveryModeID to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) WithDeliveryModeID(deliveryModeID string) *SetCartDeliveryModeUsingPUTParams {
	o.SetDeliveryModeID(deliveryModeID)
	return o
}

// SetDeliveryModeID adds the deliveryModeId to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) SetDeliveryModeID(deliveryModeID string) {
	o.DeliveryModeID = deliveryModeID
}

// WithUserID adds the userID to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) WithUserID(userID string) *SetCartDeliveryModeUsingPUTParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the set cart delivery mode using p u t params
func (o *SetCartDeliveryModeUsingPUTParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *SetCartDeliveryModeUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	// path param cartId
	if err := r.SetPathParam("cartId", o.CartID); err != nil {
		return err
	}

	// query param deliveryModeId
	qrDeliveryModeID := o.DeliveryModeID
	qDeliveryModeID := qrDeliveryModeID
	if qDeliveryModeID != "" {
		if err := r.SetQueryParam("deliveryModeId", qDeliveryModeID); err != nil {
			return err
		}
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
