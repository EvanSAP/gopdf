// Code generated by go-swagger; DO NOT EDIT.

package carts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new carts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for carts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddCartEntryUsingPOST1 adds a product to the cart

Adds a product to the cart.
*/
func (a *Client) AddCartEntryUsingPOST1(params *AddCartEntryUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter) (*AddCartEntryUsingPOST1OK, *AddCartEntryUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCartEntryUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCartEntryUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/entries",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddCartEntryUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddCartEntryUsingPOST1OK:
		return value, nil, nil
	case *AddCartEntryUsingPOST1Created:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
AddPaymentDetailsUsingPOST1 defines and assigns details of a new credit card payment to the cart

Defines the details of a new credit card, and assigns this payment option to the cart.
*/
func (a *Client) AddPaymentDetailsUsingPOST1(params *AddPaymentDetailsUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter) (*AddPaymentDetailsUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPaymentDetailsUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addPaymentDetailsUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddPaymentDetailsUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddPaymentDetailsUsingPOST1Created), nil

}

/*
ApplyPromotionUsingPOST enables promotions based on the promotions Id of the cart

Enables a promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.
*/
func (a *Client) ApplyPromotionUsingPOST(params *ApplyPromotionUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ApplyPromotionUsingPOSTOK, *ApplyPromotionUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyPromotionUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "applyPromotionUsingPOST",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplyPromotionUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ApplyPromotionUsingPOSTOK:
		return value, nil, nil
	case *ApplyPromotionUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ApplyVoucherForCartUsingPOST applies a voucher based on the voucher Id defined for the cart

Applies a voucher based on the voucherId defined for the cart.
*/
func (a *Client) ApplyVoucherForCartUsingPOST(params *ApplyVoucherForCartUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ApplyVoucherForCartUsingPOSTOK, *ApplyVoucherForCartUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyVoucherForCartUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "applyVoucherForCartUsingPOST",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplyVoucherForCartUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ApplyVoucherForCartUsingPOSTOK:
		return value, nil, nil
	case *ApplyVoucherForCartUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
CreateAndSetAddressUsingPOST1 creates a delivery address for the cart

Creates an address and assigns it to the cart as the delivery address.
*/
func (a *Client) CreateAndSetAddressUsingPOST1(params *CreateAndSetAddressUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter) (*CreateAndSetAddressUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAndSetAddressUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAndSetAddressUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAndSetAddressUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAndSetAddressUsingPOST1Created), nil

}

/*
CreateCartUsingPOST creates or restore a cart for a user

Creates a new cart or restores an anonymous cart as a user's cart (if an old Cart Id is given in the request).
*/
func (a *Client) CreateCartUsingPOST(params *CreateCartUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCartUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCartUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCartUsingPOST",
		Method:             "POST",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCartUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCartUsingPOSTCreated), nil

}

/*
DeleteCartUsingDELETE deletes a cart with a given cart id

Deletes a cart with a given cart id.
*/
func (a *Client) DeleteCartUsingDELETE(params *DeleteCartUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCartUsingDELETEOK, *DeleteCartUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCartUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCartUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCartUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCartUsingDELETEOK:
		return value, nil, nil
	case *DeleteCartUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetCartDeliveryModeUsingGET gets the delivery mode selected for the cart

Returns the delivery mode selected for the cart.
*/
func (a *Client) GetCartDeliveryModeUsingGET(params *GetCartDeliveryModeUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCartDeliveryModeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCartDeliveryModeUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCartDeliveryModeUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCartDeliveryModeUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCartDeliveryModeUsingGETOK), nil

}

/*
GetCartEntriesUsingGET gets cart entries

Returns cart entries.
*/
func (a *Client) GetCartEntriesUsingGET(params *GetCartEntriesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCartEntriesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCartEntriesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCartEntriesUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/entries",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCartEntriesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCartEntriesUsingGETOK), nil

}

/*
GetCartEntryUsingGET gets the details of the cart entries

Returns the details of the cart entries.
*/
func (a *Client) GetCartEntryUsingGET(params *GetCartEntryUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCartEntryUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCartEntryUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCartEntryUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCartEntryUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCartEntryUsingGETOK), nil

}

/*
GetCartUsingGET gets a cart with a given identifier

Returns the cart with a given identifier.
*/
func (a *Client) GetCartUsingGET(params *GetCartUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCartUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCartUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCartUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCartUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCartUsingGETOK), nil

}

/*
GetCartsUsingGET gets all customer carts

Lists all customer carts.
*/
func (a *Client) GetCartsUsingGET(params *GetCartsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCartsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCartsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCartsUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCartsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCartsUsingGETOK), nil

}

/*
GetPromotionUsingGET gets information about promotions applied on cart

Returns information about a promotion (with a specific promotionId), that has been applied on the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.
*/
func (a *Client) GetPromotionUsingGET(params *GetPromotionUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetPromotionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPromotionUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPromotionUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPromotionUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPromotionUsingGETOK), nil

}

/*
GetPromotionsUsingGET gets information about promotions applied on cart

Returns information about the promotions applied on the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.
*/
func (a *Client) GetPromotionsUsingGET(params *GetPromotionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetPromotionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPromotionsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPromotionsUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPromotionsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPromotionsUsingGETOK), nil

}

/*
GetSupportedDeliveryModesUsingGET gets all delivery modes for the current store and delivery address

Returns all delivery modes supported for the current base store and cart delivery address. A delivery address must be set for the cart, otherwise an empty list will be returned.
*/
func (a *Client) GetSupportedDeliveryModesUsingGET(params *GetSupportedDeliveryModesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSupportedDeliveryModesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupportedDeliveryModesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSupportedDeliveryModesUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSupportedDeliveryModesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSupportedDeliveryModesUsingGETOK), nil

}

/*
GetVouchersUsingGET gets a list of vouchers applied to the cart

Returns a list of vouchers applied to the cart.
*/
func (a *Client) GetVouchersUsingGET(params *GetVouchersUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetVouchersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVouchersUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVouchersUsingGET",
		Method:             "GET",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVouchersUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVouchersUsingGETOK), nil

}

/*
GuestLoginUsingPUT assigns an email to the cart

Assigns an email to the cart. This step is required to make a guest checkout.
*/
func (a *Client) GuestLoginUsingPUT(params *GuestLoginUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*GuestLoginUsingPUTOK, *GuestLoginUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGuestLoginUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "guestLoginUsingPUT",
		Method:             "PUT",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/email",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GuestLoginUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GuestLoginUsingPUTOK:
		return value, nil, nil
	case *GuestLoginUsingPUTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ReleaseVoucherFromCartUsingDELETE deletes a voucher defined for the current cart

Removes a voucher based on the voucherId defined for the current cart.
*/
func (a *Client) ReleaseVoucherFromCartUsingDELETE(params *ReleaseVoucherFromCartUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*ReleaseVoucherFromCartUsingDELETEOK, *ReleaseVoucherFromCartUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseVoucherFromCartUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "releaseVoucherFromCartUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReleaseVoucherFromCartUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReleaseVoucherFromCartUsingDELETEOK:
		return value, nil, nil
	case *ReleaseVoucherFromCartUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RemoveCartDeliveryAddressUsingDELETE deletes the delivery address from the cart

Removes the delivery address from the cart.
*/
func (a *Client) RemoveCartDeliveryAddressUsingDELETE(params *RemoveCartDeliveryAddressUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveCartDeliveryAddressUsingDELETEOK, *RemoveCartDeliveryAddressUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveCartDeliveryAddressUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeCartDeliveryAddressUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveCartDeliveryAddressUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemoveCartDeliveryAddressUsingDELETEOK:
		return value, nil, nil
	case *RemoveCartDeliveryAddressUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RemoveCartEntryUsingDELETE deletes cart entry

Deletes cart entry.
*/
func (a *Client) RemoveCartEntryUsingDELETE(params *RemoveCartEntryUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveCartEntryUsingDELETEOK, *RemoveCartEntryUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveCartEntryUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeCartEntryUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveCartEntryUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemoveCartEntryUsingDELETEOK:
		return value, nil, nil
	case *RemoveCartEntryUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RemoveDeliveryModeUsingDELETE deletes the delivery mode from the cart

Removes the delivery mode from the cart.
*/
func (a *Client) RemoveDeliveryModeUsingDELETE(params *RemoveDeliveryModeUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveDeliveryModeUsingDELETEOK, *RemoveDeliveryModeUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDeliveryModeUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeDeliveryModeUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveDeliveryModeUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemoveDeliveryModeUsingDELETEOK:
		return value, nil, nil
	case *RemoveDeliveryModeUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RemovePromotionUsingDELETE disables the promotion based on the promotions Id of the cart

Disables the promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.
*/
func (a *Client) RemovePromotionUsingDELETE(params *RemovePromotionUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RemovePromotionUsingDELETEOK, *RemovePromotionUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemovePromotionUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removePromotionUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemovePromotionUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemovePromotionUsingDELETEOK:
		return value, nil, nil
	case *RemovePromotionUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SetCartDeliveryAddressUsingPUT sets a delivery address for the cart

Sets a delivery address for the cart. The address country must be placed among the delivery countries of the current base store.
*/
func (a *Client) SetCartDeliveryAddressUsingPUT(params *SetCartDeliveryAddressUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*SetCartDeliveryAddressUsingPUTOK, *SetCartDeliveryAddressUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCartDeliveryAddressUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setCartDeliveryAddressUsingPUT",
		Method:             "PUT",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCartDeliveryAddressUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SetCartDeliveryAddressUsingPUTOK:
		return value, nil, nil
	case *SetCartDeliveryAddressUsingPUTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SetCartDeliveryModeUsingPUT sets the delivery mode for a cart

Sets the delivery mode with a given identifier for the cart.
*/
func (a *Client) SetCartDeliveryModeUsingPUT(params *SetCartDeliveryModeUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*SetCartDeliveryModeUsingPUTOK, *SetCartDeliveryModeUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCartDeliveryModeUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setCartDeliveryModeUsingPUT",
		Method:             "PUT",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCartDeliveryModeUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SetCartDeliveryModeUsingPUTOK:
		return value, nil, nil
	case *SetCartDeliveryModeUsingPUTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SetCartEntryUsingPUT1 sets quantity and store details of a cart entry

Updates the quantity of a single cart entry and the details of the store where the cart entry will be picked up. Attributes not provided in request will be defined again (set to null or default)
*/
func (a *Client) SetCartEntryUsingPUT1(params *SetCartEntryUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter) (*SetCartEntryUsingPUT1OK, *SetCartEntryUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCartEntryUsingPUT1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setCartEntryUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCartEntryUsingPUT1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SetCartEntryUsingPUT1OK:
		return value, nil, nil
	case *SetCartEntryUsingPUT1Created:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SetPaymentDetailsUsingPUT sets credit card payment details for the cart

Sets credit card payment details for the cart.
*/
func (a *Client) SetPaymentDetailsUsingPUT(params *SetPaymentDetailsUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*SetPaymentDetailsUsingPUTOK, *SetPaymentDetailsUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPaymentDetailsUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPaymentDetailsUsingPUT",
		Method:             "PUT",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetPaymentDetailsUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SetPaymentDetailsUsingPUTOK:
		return value, nil, nil
	case *SetPaymentDetailsUsingPUTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
UpdateCartEntryUsingPATCH1 updates quantity and store details of a cart entry

Updates the quantity of a single cart entry and the details of the store where the cart entry will be picked up.
*/
func (a *Client) UpdateCartEntryUsingPATCH1(params *UpdateCartEntryUsingPATCH1Params, authInfo runtime.ClientAuthInfoWriter) (*UpdateCartEntryUsingPATCH1OK, *UpdateCartEntryUsingPATCH1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCartEntryUsingPATCH1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCartEntryUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCartEntryUsingPATCH1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateCartEntryUsingPATCH1OK:
		return value, nil, nil
	case *UpdateCartEntryUsingPATCH1NoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
