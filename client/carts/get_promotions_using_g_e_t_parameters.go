// Code generated by go-swagger; DO NOT EDIT.

package carts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"golang.org/x/net/context"
)

// NewGetPromotionsUsingGETParams creates a new GetPromotionsUsingGETParams object
// with the default values initialized.
func NewGetPromotionsUsingGETParams() *GetPromotionsUsingGETParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &GetPromotionsUsingGETParams{
		Fields: &fieldsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPromotionsUsingGETParamsWithTimeout creates a new GetPromotionsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPromotionsUsingGETParamsWithTimeout(timeout time.Duration) *GetPromotionsUsingGETParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &GetPromotionsUsingGETParams{
		Fields: &fieldsDefault,

		timeout: timeout,
	}
}

// NewGetPromotionsUsingGETParamsWithContext creates a new GetPromotionsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPromotionsUsingGETParamsWithContext(ctx context.Context) *GetPromotionsUsingGETParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &GetPromotionsUsingGETParams{
		Fields: &fieldsDefault,

		Context: ctx,
	}
}

// NewGetPromotionsUsingGETParamsWithHTTPClient creates a new GetPromotionsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPromotionsUsingGETParamsWithHTTPClient(client *http.Client) *GetPromotionsUsingGETParams {
	var (
		fieldsDefault = string("DEFAULT")
	)
	return &GetPromotionsUsingGETParams{
		Fields:     &fieldsDefault,
		HTTPClient: client,
	}
}

/*GetPromotionsUsingGETParams contains all the parameters to send to the API endpoint
for the get promotions using g e t operation typically these are written to a http.Request
*/
type GetPromotionsUsingGETParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*CartID
	  Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart

	*/
	CartID string
	/*Fields
	  Response configuration. This is the list of fields that should be returned in the response body.

	*/
	Fields *string
	/*UserID
	  User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) WithTimeout(timeout time.Duration) *GetPromotionsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) WithContext(ctx context.Context) *GetPromotionsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) WithHTTPClient(client *http.Client) *GetPromotionsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) WithBaseSiteID(baseSiteID string) *GetPromotionsUsingGETParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithCartID adds the cartID to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) WithCartID(cartID string) *GetPromotionsUsingGETParams {
	o.SetCartID(cartID)
	return o
}

// SetCartID adds the cartId to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) SetCartID(cartID string) {
	o.CartID = cartID
}

// WithFields adds the fields to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) WithFields(fields *string) *GetPromotionsUsingGETParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithUserID adds the userID to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) WithUserID(userID string) *GetPromotionsUsingGETParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get promotions using g e t params
func (o *GetPromotionsUsingGETParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetPromotionsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	// path param cartId
	if err := r.SetPathParam("cartId", o.CartID); err != nil {
		return err
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
