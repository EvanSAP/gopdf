// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/gopdf/client/address"
	"github.com/gopdf/client/base_stores"
	"github.com/gopdf/client/carts"
	"github.com/gopdf/client/catalogs"
	"github.com/gopdf/client/component"
	"github.com/gopdf/client/consents"
	"github.com/gopdf/client/countries"
	"github.com/gopdf/client/customer_groups"
	"github.com/gopdf/client/export"
	"github.com/gopdf/client/extended_carts"
	"github.com/gopdf/client/feeds"
	"github.com/gopdf/client/forgotten_passwords"
	"github.com/gopdf/client/merchant_callback"
	"github.com/gopdf/client/miscs"
	"github.com/gopdf/client/orders"
	"github.com/gopdf/client/page"
	"github.com/gopdf/client/payment_details"
	"github.com/gopdf/client/products"
	"github.com/gopdf/client/promotions"
	"github.com/gopdf/client/save_cart"
	"github.com/gopdf/client/stores"
	"github.com/gopdf/client/users"
	"github.com/gopdf/client/vouchers"
)

// Default commercesuite HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "electronics.cqz1m-softwarea1-d10-public.model-t.cc.commerce.ondemand.com"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/rest/v2"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new commercesuite HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Commercesuite {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new commercesuite HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Commercesuite {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new commercesuite client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Commercesuite {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Commercesuite)
	cli.Transport = transport

	cli.Address = address.New(transport, formats)

	cli.BaseStores = base_stores.New(transport, formats)

	cli.Carts = carts.New(transport, formats)

	cli.Catalogs = catalogs.New(transport, formats)

	cli.Component = component.New(transport, formats)

	cli.Consents = consents.New(transport, formats)

	cli.Countries = countries.New(transport, formats)

	cli.CustomerGroups = customer_groups.New(transport, formats)

	cli.Export = export.New(transport, formats)

	cli.ExtendedCarts = extended_carts.New(transport, formats)

	cli.Feeds = feeds.New(transport, formats)

	cli.ForgottenPasswords = forgotten_passwords.New(transport, formats)

	cli.MerchantCallback = merchant_callback.New(transport, formats)

	cli.Miscs = miscs.New(transport, formats)

	cli.Orders = orders.New(transport, formats)

	cli.Page = page.New(transport, formats)

	cli.PaymentDetails = payment_details.New(transport, formats)

	cli.Products = products.New(transport, formats)

	cli.Promotions = promotions.New(transport, formats)

	cli.SaveCart = save_cart.New(transport, formats)

	cli.Stores = stores.New(transport, formats)

	cli.Users = users.New(transport, formats)

	cli.Vouchers = vouchers.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Commercesuite is a client for commercesuite
type Commercesuite struct {
	Address *address.Client

	BaseStores *base_stores.Client

	Carts *carts.Client

	Catalogs *catalogs.Client

	Component *component.Client

	Consents *consents.Client

	Countries *countries.Client

	CustomerGroups *customer_groups.Client

	Export *export.Client

	ExtendedCarts *extended_carts.Client

	Feeds *feeds.Client

	ForgottenPasswords *forgotten_passwords.Client

	MerchantCallback *merchant_callback.Client

	Miscs *miscs.Client

	Orders *orders.Client

	Page *page.Client

	PaymentDetails *payment_details.Client

	Products *products.Client

	Promotions *promotions.Client

	SaveCart *save_cart.Client

	Stores *stores.Client

	Users *users.Client

	Vouchers *vouchers.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Commercesuite) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Address.SetTransport(transport)

	c.BaseStores.SetTransport(transport)

	c.Carts.SetTransport(transport)

	c.Catalogs.SetTransport(transport)

	c.Component.SetTransport(transport)

	c.Consents.SetTransport(transport)

	c.Countries.SetTransport(transport)

	c.CustomerGroups.SetTransport(transport)

	c.Export.SetTransport(transport)

	c.ExtendedCarts.SetTransport(transport)

	c.Feeds.SetTransport(transport)

	c.ForgottenPasswords.SetTransport(transport)

	c.MerchantCallback.SetTransport(transport)

	c.Miscs.SetTransport(transport)

	c.Orders.SetTransport(transport)

	c.Page.SetTransport(transport)

	c.PaymentDetails.SetTransport(transport)

	c.Products.SetTransport(transport)

	c.Promotions.SetTransport(transport)

	c.SaveCart.SetTransport(transport)

	c.Stores.SetTransport(transport)

	c.Users.SetTransport(transport)

	c.Vouchers.SetTransport(transport)

}
