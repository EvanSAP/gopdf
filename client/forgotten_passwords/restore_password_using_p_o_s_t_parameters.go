// Code generated by go-swagger; DO NOT EDIT.

package forgotten_passwords

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"golang.org/x/net/context"
)

// NewRestorePasswordUsingPOSTParams creates a new RestorePasswordUsingPOSTParams object
// with the default values initialized.
func NewRestorePasswordUsingPOSTParams() *RestorePasswordUsingPOSTParams {
	var ()
	return &RestorePasswordUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRestorePasswordUsingPOSTParamsWithTimeout creates a new RestorePasswordUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRestorePasswordUsingPOSTParamsWithTimeout(timeout time.Duration) *RestorePasswordUsingPOSTParams {
	var ()
	return &RestorePasswordUsingPOSTParams{

		timeout: timeout,
	}
}

// NewRestorePasswordUsingPOSTParamsWithContext creates a new RestorePasswordUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewRestorePasswordUsingPOSTParamsWithContext(ctx context.Context) *RestorePasswordUsingPOSTParams {
	var ()
	return &RestorePasswordUsingPOSTParams{

		Context: ctx,
	}
}

// NewRestorePasswordUsingPOSTParamsWithHTTPClient creates a new RestorePasswordUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRestorePasswordUsingPOSTParamsWithHTTPClient(client *http.Client) *RestorePasswordUsingPOSTParams {
	var ()
	return &RestorePasswordUsingPOSTParams{
		HTTPClient: client,
	}
}

/*RestorePasswordUsingPOSTParams contains all the parameters to send to the API endpoint
for the restore password using p o s t operation typically these are written to a http.Request
*/
type RestorePasswordUsingPOSTParams struct {

	/*BaseSiteID
	  Base site identifier

	*/
	BaseSiteID string
	/*UserID
	  Customer's user id. Customer user id is case insensitive.

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the restore password using p o s t params
func (o *RestorePasswordUsingPOSTParams) WithTimeout(timeout time.Duration) *RestorePasswordUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the restore password using p o s t params
func (o *RestorePasswordUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the restore password using p o s t params
func (o *RestorePasswordUsingPOSTParams) WithContext(ctx context.Context) *RestorePasswordUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the restore password using p o s t params
func (o *RestorePasswordUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the restore password using p o s t params
func (o *RestorePasswordUsingPOSTParams) WithHTTPClient(client *http.Client) *RestorePasswordUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the restore password using p o s t params
func (o *RestorePasswordUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSiteID adds the baseSiteID to the restore password using p o s t params
func (o *RestorePasswordUsingPOSTParams) WithBaseSiteID(baseSiteID string) *RestorePasswordUsingPOSTParams {
	o.SetBaseSiteID(baseSiteID)
	return o
}

// SetBaseSiteID adds the baseSiteId to the restore password using p o s t params
func (o *RestorePasswordUsingPOSTParams) SetBaseSiteID(baseSiteID string) {
	o.BaseSiteID = baseSiteID
}

// WithUserID adds the userID to the restore password using p o s t params
func (o *RestorePasswordUsingPOSTParams) WithUserID(userID string) *RestorePasswordUsingPOSTParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the restore password using p o s t params
func (o *RestorePasswordUsingPOSTParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *RestorePasswordUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSiteId
	if err := r.SetPathParam("baseSiteId", o.BaseSiteID); err != nil {
		return err
	}

	// query param userId
	qrUserID := o.UserID
	qUserID := qrUserID
	if qUserID != "" {
		if err := r.SetQueryParam("userId", qUserID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
