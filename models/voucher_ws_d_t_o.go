// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VoucherWsDTO voucher ws d t o
// swagger:model VoucherWsDTO
type VoucherWsDTO struct {

	// applied value
	AppliedValue *PriceWsDTO `json:"appliedValue,omitempty"`

	// code
	Code string `json:"code,omitempty"`

	// currency
	Currency *CurrencyWsDTO `json:"currency,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// free shipping
	FreeShipping bool `json:"freeShipping,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// value
	Value float64 `json:"value,omitempty"`

	// value formatted
	ValueFormatted string `json:"valueFormatted,omitempty"`

	// value string
	ValueString string `json:"valueString,omitempty"`

	// voucher code
	VoucherCode string `json:"voucherCode,omitempty"`
}

// Validate validates this voucher ws d t o
func (m *VoucherWsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VoucherWsDTO) validateAppliedValue(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedValue) { // not required
		return nil
	}

	if m.AppliedValue != nil {
		if err := m.AppliedValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appliedValue")
			}
			return err
		}
	}

	return nil
}

func (m *VoucherWsDTO) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VoucherWsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VoucherWsDTO) UnmarshalBinary(b []byte) error {
	var res VoucherWsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
