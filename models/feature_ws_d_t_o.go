// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FeatureWsDTO feature ws d t o
// swagger:model FeatureWsDTO
type FeatureWsDTO struct {

	// code
	Code string `json:"code,omitempty"`

	// comparable
	Comparable bool `json:"comparable,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// feature unit
	FeatureUnit *FeatureUnitWsDTO `json:"featureUnit,omitempty"`

	// feature values
	FeatureValues []*FeatureValueWsDTO `json:"featureValues"`

	// name
	Name string `json:"name,omitempty"`

	// range
	Range bool `json:"range,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this feature ws d t o
func (m *FeatureWsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatureUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureWsDTO) validateFeatureUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FeatureUnit) { // not required
		return nil
	}

	if m.FeatureUnit != nil {
		if err := m.FeatureUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featureUnit")
			}
			return err
		}
	}

	return nil
}

func (m *FeatureWsDTO) validateFeatureValues(formats strfmt.Registry) error {

	if swag.IsZero(m.FeatureValues) { // not required
		return nil
	}

	for i := 0; i < len(m.FeatureValues); i++ {
		if swag.IsZero(m.FeatureValues[i]) { // not required
			continue
		}

		if m.FeatureValues[i] != nil {
			if err := m.FeatureValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeatureWsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeatureWsDTO) UnmarshalBinary(b []byte) error {
	var res FeatureWsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
