// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FutureStockWsDTO future stock ws d t o
// swagger:model FutureStockWsDTO
type FutureStockWsDTO struct {

	// date
	// Format: date-time
	Date CustomDateTime `json:"date,omitempty"`

	// formatted date
	FormattedDate string `json:"formattedDate,omitempty"`

	// stock
	Stock *StockWsDTO `json:"stock,omitempty"`
}

// Validate validates this future stock ws d t o
func (m *FutureStockWsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FutureStockWsDTO) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FutureStockWsDTO) validateStock(formats strfmt.Registry) error {

	if swag.IsZero(m.Stock) { // not required
		return nil
	}

	if m.Stock != nil {
		if err := m.Stock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stock")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FutureStockWsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FutureStockWsDTO) UnmarshalBinary(b []byte) error {
	var res FutureStockWsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
