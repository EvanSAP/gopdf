// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProductWsDTO product ws d t o
// swagger:model ProductWsDTO
type ProductWsDTO struct {

	// available for pickup
	AvailableForPickup bool `json:"availableForPickup,omitempty"`

	// average rating
	AverageRating float64 `json:"averageRating,omitempty"`

	// base options
	BaseOptions []*BaseOptionWsDTO `json:"baseOptions"`

	// base product
	BaseProduct string `json:"baseProduct,omitempty"`

	// categories
	Categories []*CategoryWsDTO `json:"categories"`

	// classifications
	Classifications []*ClassificationWsDTO `json:"classifications"`

	// code
	Code string `json:"code,omitempty"`

	// configurable
	Configurable bool `json:"configurable,omitempty"`

	// configurator type
	ConfiguratorType string `json:"configuratorType,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// future stocks
	FutureStocks []*FutureStockWsDTO `json:"futureStocks"`

	// images
	Images []*ImageWsDTO `json:"images"`

	// manufacturer
	Manufacturer string `json:"manufacturer,omitempty"`

	// multidimensional
	Multidimensional bool `json:"multidimensional,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number of reviews
	NumberOfReviews int32 `json:"numberOfReviews,omitempty"`

	// potential promotions
	PotentialPromotions []*PromotionWsDTO `json:"potentialPromotions"`

	// price
	Price *PriceWsDTO `json:"price,omitempty"`

	// price range
	PriceRange *PriceRangeWsDTO `json:"priceRange,omitempty"`

	// product references
	ProductReferences []*ProductReferenceWsDTO `json:"productReferences"`

	// purchasable
	Purchasable bool `json:"purchasable,omitempty"`

	// reviews
	Reviews []*ReviewWsDTO `json:"reviews"`

	// stock
	Stock *StockWsDTO `json:"stock,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// url
	URL string `json:"url,omitempty"`

	// variant matrix
	VariantMatrix []*VariantMatrixElementWsDTO `json:"variantMatrix"`

	// variant options
	VariantOptions []*VariantOptionWsDTO `json:"variantOptions"`

	// variant type
	VariantType string `json:"variantType,omitempty"`

	// volume prices
	VolumePrices []*PriceWsDTO `json:"volumePrices"`

	// volume prices flag
	VolumePricesFlag bool `json:"volumePricesFlag,omitempty"`
}

// Validate validates this product ws d t o
func (m *ProductWsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClassifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFutureStocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePotentialPromotions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviews(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariantMatrix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariantOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumePrices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductWsDTO) validateBaseOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.BaseOptions); i++ {
		if swag.IsZero(m.BaseOptions[i]) { // not required
			continue
		}

		if m.BaseOptions[i] != nil {
			if err := m.BaseOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("baseOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductWsDTO) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	for i := 0; i < len(m.Categories); i++ {
		if swag.IsZero(m.Categories[i]) { // not required
			continue
		}

		if m.Categories[i] != nil {
			if err := m.Categories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductWsDTO) validateClassifications(formats strfmt.Registry) error {

	if swag.IsZero(m.Classifications) { // not required
		return nil
	}

	for i := 0; i < len(m.Classifications); i++ {
		if swag.IsZero(m.Classifications[i]) { // not required
			continue
		}

		if m.Classifications[i] != nil {
			if err := m.Classifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("classifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductWsDTO) validateFutureStocks(formats strfmt.Registry) error {

	if swag.IsZero(m.FutureStocks) { // not required
		return nil
	}

	for i := 0; i < len(m.FutureStocks); i++ {
		if swag.IsZero(m.FutureStocks[i]) { // not required
			continue
		}

		if m.FutureStocks[i] != nil {
			if err := m.FutureStocks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("futureStocks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductWsDTO) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductWsDTO) validatePotentialPromotions(formats strfmt.Registry) error {

	if swag.IsZero(m.PotentialPromotions) { // not required
		return nil
	}

	for i := 0; i < len(m.PotentialPromotions); i++ {
		if swag.IsZero(m.PotentialPromotions[i]) { // not required
			continue
		}

		if m.PotentialPromotions[i] != nil {
			if err := m.PotentialPromotions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("potentialPromotions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductWsDTO) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *ProductWsDTO) validatePriceRange(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceRange) { // not required
		return nil
	}

	if m.PriceRange != nil {
		if err := m.PriceRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priceRange")
			}
			return err
		}
	}

	return nil
}

func (m *ProductWsDTO) validateProductReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductReferences) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductReferences); i++ {
		if swag.IsZero(m.ProductReferences[i]) { // not required
			continue
		}

		if m.ProductReferences[i] != nil {
			if err := m.ProductReferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("productReferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductWsDTO) validateReviews(formats strfmt.Registry) error {

	if swag.IsZero(m.Reviews) { // not required
		return nil
	}

	for i := 0; i < len(m.Reviews); i++ {
		if swag.IsZero(m.Reviews[i]) { // not required
			continue
		}

		if m.Reviews[i] != nil {
			if err := m.Reviews[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reviews" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductWsDTO) validateStock(formats strfmt.Registry) error {

	if swag.IsZero(m.Stock) { // not required
		return nil
	}

	if m.Stock != nil {
		if err := m.Stock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stock")
			}
			return err
		}
	}

	return nil
}

func (m *ProductWsDTO) validateVariantMatrix(formats strfmt.Registry) error {

	if swag.IsZero(m.VariantMatrix) { // not required
		return nil
	}

	for i := 0; i < len(m.VariantMatrix); i++ {
		if swag.IsZero(m.VariantMatrix[i]) { // not required
			continue
		}

		if m.VariantMatrix[i] != nil {
			if err := m.VariantMatrix[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variantMatrix" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductWsDTO) validateVariantOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.VariantOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.VariantOptions); i++ {
		if swag.IsZero(m.VariantOptions[i]) { // not required
			continue
		}

		if m.VariantOptions[i] != nil {
			if err := m.VariantOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variantOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductWsDTO) validateVolumePrices(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumePrices) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumePrices); i++ {
		if swag.IsZero(m.VolumePrices[i]) { // not required
			continue
		}

		if m.VolumePrices[i] != nil {
			if err := m.VolumePrices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumePrices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductWsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductWsDTO) UnmarshalBinary(b []byte) error {
	var res ProductWsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
