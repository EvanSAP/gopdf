// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CartWsDTO cart ws d t o
// swagger:model CartWsDTO
type CartWsDTO struct {

	// applied order promotions
	AppliedOrderPromotions []*PromotionResultWsDTO `json:"appliedOrderPromotions"`

	// applied product promotions
	AppliedProductPromotions []*PromotionResultWsDTO `json:"appliedProductPromotions"`

	// applied vouchers
	AppliedVouchers []*VoucherWsDTO `json:"appliedVouchers"`

	// calculated
	Calculated bool `json:"calculated,omitempty"`

	// code
	Code string `json:"code,omitempty"`

	// delivery address
	DeliveryAddress *AddressWsDTO `json:"deliveryAddress,omitempty"`

	// delivery cost
	DeliveryCost *PriceWsDTO `json:"deliveryCost,omitempty"`

	// delivery items quantity
	DeliveryItemsQuantity int64 `json:"deliveryItemsQuantity,omitempty"`

	// delivery mode
	DeliveryMode *DeliveryModeWsDTO `json:"deliveryMode,omitempty"`

	// delivery order groups
	DeliveryOrderGroups []*DeliveryOrderEntryGroupWsDTO `json:"deliveryOrderGroups"`

	// description
	Description string `json:"description,omitempty"`

	// entries
	Entries []*OrderEntryWsDTO `json:"entries"`

	// expiration time
	// Format: date-time
	ExpirationTime CustomDateTime `json:"expirationTime,omitempty"`

	// guid
	GUID string `json:"guid,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// net
	Net bool `json:"net,omitempty"`

	// order discounts
	OrderDiscounts *PriceWsDTO `json:"orderDiscounts,omitempty"`

	// payment info
	PaymentInfo *PaymentDetailsWsDTO `json:"paymentInfo,omitempty"`

	// pickup items quantity
	PickupItemsQuantity int64 `json:"pickupItemsQuantity,omitempty"`

	// pickup order groups
	PickupOrderGroups []*PickupOrderEntryGroupWsDTO `json:"pickupOrderGroups"`

	// potential order promotions
	PotentialOrderPromotions []*PromotionResultWsDTO `json:"potentialOrderPromotions"`

	// potential product promotions
	PotentialProductPromotions []*PromotionResultWsDTO `json:"potentialProductPromotions"`

	// product discounts
	ProductDiscounts *PriceWsDTO `json:"productDiscounts,omitempty"`

	// save time
	// Format: date-time
	SaveTime CustomDateTime `json:"saveTime,omitempty"`

	// saved by
	SavedBy *PrincipalWsDTO `json:"savedBy,omitempty"`

	// site
	Site string `json:"site,omitempty"`

	// store
	Store string `json:"store,omitempty"`

	// sub total
	SubTotal *PriceWsDTO `json:"subTotal,omitempty"`

	// total discounts
	TotalDiscounts *PriceWsDTO `json:"totalDiscounts,omitempty"`

	// total items
	TotalItems int32 `json:"totalItems,omitempty"`

	// total price
	TotalPrice *PriceWsDTO `json:"totalPrice,omitempty"`

	// total price with tax
	TotalPriceWithTax *PriceWsDTO `json:"totalPriceWithTax,omitempty"`

	// total tax
	TotalTax *PriceWsDTO `json:"totalTax,omitempty"`

	// total unit count
	TotalUnitCount int32 `json:"totalUnitCount,omitempty"`

	// user
	User *PrincipalWsDTO `json:"user,omitempty"`
}

// Validate validates this cart ws d t o
func (m *CartWsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedOrderPromotions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppliedProductPromotions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppliedVouchers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryOrderGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDiscounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupOrderGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePotentialOrderPromotions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePotentialProductPromotions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductDiscounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaveTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSavedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDiscounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPriceWithTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartWsDTO) validateAppliedOrderPromotions(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedOrderPromotions) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliedOrderPromotions); i++ {
		if swag.IsZero(m.AppliedOrderPromotions[i]) { // not required
			continue
		}

		if m.AppliedOrderPromotions[i] != nil {
			if err := m.AppliedOrderPromotions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appliedOrderPromotions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartWsDTO) validateAppliedProductPromotions(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedProductPromotions) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliedProductPromotions); i++ {
		if swag.IsZero(m.AppliedProductPromotions[i]) { // not required
			continue
		}

		if m.AppliedProductPromotions[i] != nil {
			if err := m.AppliedProductPromotions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appliedProductPromotions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartWsDTO) validateAppliedVouchers(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedVouchers) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliedVouchers); i++ {
		if swag.IsZero(m.AppliedVouchers[i]) { // not required
			continue
		}

		if m.AppliedVouchers[i] != nil {
			if err := m.AppliedVouchers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appliedVouchers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartWsDTO) validateDeliveryAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryAddress) { // not required
		return nil
	}

	if m.DeliveryAddress != nil {
		if err := m.DeliveryAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validateDeliveryCost(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryCost) { // not required
		return nil
	}

	if m.DeliveryCost != nil {
		if err := m.DeliveryCost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryCost")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validateDeliveryMode(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryMode) { // not required
		return nil
	}

	if m.DeliveryMode != nil {
		if err := m.DeliveryMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryMode")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validateDeliveryOrderGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryOrderGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.DeliveryOrderGroups); i++ {
		if swag.IsZero(m.DeliveryOrderGroups[i]) { // not required
			continue
		}

		if m.DeliveryOrderGroups[i] != nil {
			if err := m.DeliveryOrderGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deliveryOrderGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartWsDTO) validateEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.Entries) { // not required
		return nil
	}

	for i := 0; i < len(m.Entries); i++ {
		if swag.IsZero(m.Entries[i]) { // not required
			continue
		}

		if m.Entries[i] != nil {
			if err := m.Entries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartWsDTO) validateExpirationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationTime", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CartWsDTO) validateOrderDiscounts(formats strfmt.Registry) error {

	if swag.IsZero(m.OrderDiscounts) { // not required
		return nil
	}

	if m.OrderDiscounts != nil {
		if err := m.OrderDiscounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderDiscounts")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validatePaymentInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentInfo) { // not required
		return nil
	}

	if m.PaymentInfo != nil {
		if err := m.PaymentInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validatePickupOrderGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.PickupOrderGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.PickupOrderGroups); i++ {
		if swag.IsZero(m.PickupOrderGroups[i]) { // not required
			continue
		}

		if m.PickupOrderGroups[i] != nil {
			if err := m.PickupOrderGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pickupOrderGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartWsDTO) validatePotentialOrderPromotions(formats strfmt.Registry) error {

	if swag.IsZero(m.PotentialOrderPromotions) { // not required
		return nil
	}

	for i := 0; i < len(m.PotentialOrderPromotions); i++ {
		if swag.IsZero(m.PotentialOrderPromotions[i]) { // not required
			continue
		}

		if m.PotentialOrderPromotions[i] != nil {
			if err := m.PotentialOrderPromotions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("potentialOrderPromotions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartWsDTO) validatePotentialProductPromotions(formats strfmt.Registry) error {

	if swag.IsZero(m.PotentialProductPromotions) { // not required
		return nil
	}

	for i := 0; i < len(m.PotentialProductPromotions); i++ {
		if swag.IsZero(m.PotentialProductPromotions[i]) { // not required
			continue
		}

		if m.PotentialProductPromotions[i] != nil {
			if err := m.PotentialProductPromotions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("potentialProductPromotions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CartWsDTO) validateProductDiscounts(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductDiscounts) { // not required
		return nil
	}

	if m.ProductDiscounts != nil {
		if err := m.ProductDiscounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productDiscounts")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validateSaveTime(formats strfmt.Registry) error {

	if swag.IsZero(m.SaveTime) { // not required
		return nil
	}

	if err := validate.FormatOf("saveTime", "body", "date-time", m.SaveTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CartWsDTO) validateSavedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.SavedBy) { // not required
		return nil
	}

	if m.SavedBy != nil {
		if err := m.SavedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("savedBy")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validateSubTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.SubTotal) { // not required
		return nil
	}

	if m.SubTotal != nil {
		if err := m.SubTotal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subTotal")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validateTotalDiscounts(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalDiscounts) { // not required
		return nil
	}

	if m.TotalDiscounts != nil {
		if err := m.TotalDiscounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalDiscounts")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validateTotalPrice(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalPrice) { // not required
		return nil
	}

	if m.TotalPrice != nil {
		if err := m.TotalPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalPrice")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validateTotalPriceWithTax(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalPriceWithTax) { // not required
		return nil
	}

	if m.TotalPriceWithTax != nil {
		if err := m.TotalPriceWithTax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalPriceWithTax")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validateTotalTax(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalTax) { // not required
		return nil
	}

	if m.TotalTax != nil {
		if err := m.TotalTax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalTax")
			}
			return err
		}
	}

	return nil
}

func (m *CartWsDTO) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CartWsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CartWsDTO) UnmarshalBinary(b []byte) error {
	var res CartWsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
