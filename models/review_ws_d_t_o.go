// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReviewWsDTO review ws d t o
// swagger:model ReviewWsDTO
type ReviewWsDTO struct {

	// alias
	Alias string `json:"alias,omitempty"`

	// comment
	Comment string `json:"comment,omitempty"`

	// date
	// Format: date-time
	Date CustomDateTime `json:"date,omitempty"`

	// headline
	Headline string `json:"headline,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// principal
	Principal *UserWsDTO `json:"principal,omitempty"`

	// rating
	Rating float64 `json:"rating,omitempty"`
}

// Validate validates this review ws d t o
func (m *ReviewWsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrincipal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReviewWsDTO) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReviewWsDTO) validatePrincipal(formats strfmt.Registry) error {

	if swag.IsZero(m.Principal) { // not required
		return nil
	}

	if m.Principal != nil {
		if err := m.Principal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("principal")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReviewWsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReviewWsDTO) UnmarshalBinary(b []byte) error {
	var res ReviewWsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
