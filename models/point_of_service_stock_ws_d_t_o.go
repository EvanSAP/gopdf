// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PointOfServiceStockWsDTO point of service stock ws d t o
// swagger:model PointOfServiceStockWsDTO
type PointOfServiceStockWsDTO struct {

	// address
	Address *AddressWsDTO `json:"address,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// distance km
	DistanceKm float64 `json:"distanceKm,omitempty"`

	// features
	Features map[string]string `json:"features,omitempty"`

	// formatted distance
	FormattedDistance string `json:"formattedDistance,omitempty"`

	// geo point
	GeoPoint *GeoPointWsDTO `json:"geoPoint,omitempty"`

	// map icon
	MapIcon *ImageWsDTO `json:"mapIcon,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// opening hours
	OpeningHours *OpeningScheduleWsDTO `json:"openingHours,omitempty"`

	// stock info
	StockInfo *StockWsDTO `json:"stockInfo,omitempty"`

	// store content
	StoreContent string `json:"storeContent,omitempty"`

	// store images
	StoreImages []*ImageWsDTO `json:"storeImages"`

	// url
	URL string `json:"url,omitempty"`

	// warehouse codes
	WarehouseCodes []string `json:"warehouseCodes"`
}

// Validate validates this point of service stock ws d t o
func (m *PointOfServiceStockWsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapIcon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpeningHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreImages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PointOfServiceStockWsDTO) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *PointOfServiceStockWsDTO) validateGeoPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.GeoPoint) { // not required
		return nil
	}

	if m.GeoPoint != nil {
		if err := m.GeoPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geoPoint")
			}
			return err
		}
	}

	return nil
}

func (m *PointOfServiceStockWsDTO) validateMapIcon(formats strfmt.Registry) error {

	if swag.IsZero(m.MapIcon) { // not required
		return nil
	}

	if m.MapIcon != nil {
		if err := m.MapIcon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapIcon")
			}
			return err
		}
	}

	return nil
}

func (m *PointOfServiceStockWsDTO) validateOpeningHours(formats strfmt.Registry) error {

	if swag.IsZero(m.OpeningHours) { // not required
		return nil
	}

	if m.OpeningHours != nil {
		if err := m.OpeningHours.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openingHours")
			}
			return err
		}
	}

	return nil
}

func (m *PointOfServiceStockWsDTO) validateStockInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.StockInfo) { // not required
		return nil
	}

	if m.StockInfo != nil {
		if err := m.StockInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stockInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PointOfServiceStockWsDTO) validateStoreImages(formats strfmt.Registry) error {

	if swag.IsZero(m.StoreImages) { // not required
		return nil
	}

	for i := 0; i < len(m.StoreImages); i++ {
		if swag.IsZero(m.StoreImages[i]) { // not required
			continue
		}

		if m.StoreImages[i] != nil {
			if err := m.StoreImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storeImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PointOfServiceStockWsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PointOfServiceStockWsDTO) UnmarshalBinary(b []byte) error {
	var res PointOfServiceStockWsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
