// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BaseStoreWsDTO base store ws d t o
// swagger:model BaseStoreWsDTO
type BaseStoreWsDTO struct {

	// create return process code
	CreateReturnProcessCode string `json:"createReturnProcessCode,omitempty"`

	// currencies
	Currencies []*CurrencyWsDTO `json:"currencies"`

	// default currency
	DefaultCurrency *CurrencyWsDTO `json:"defaultCurrency,omitempty"`

	// default delivery origin
	DefaultDeliveryOrigin *PointOfServiceWsDTO `json:"defaultDeliveryOrigin,omitempty"`

	// default language
	DefaultLanguage *LanguageWsDTO `json:"defaultLanguage,omitempty"`

	// delivery countries
	DeliveryCountries []*CountryWsDTO `json:"deliveryCountries"`

	// delivery modes
	DeliveryModes *DeliveryModeListWsDTO `json:"deliveryModes,omitempty"`

	// external tax enabled
	ExternalTaxEnabled bool `json:"externalTaxEnabled,omitempty"`

	// languages
	Languages []*LanguageWsDTO `json:"languages"`

	// max radius for pos search
	MaxRadiusForPosSearch float64 `json:"maxRadiusForPosSearch,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// payment provider
	PaymentProvider string `json:"paymentProvider,omitempty"`

	// points of service
	PointsOfService []*PointOfServiceWsDTO `json:"pointsOfService"`

	// submit order process code
	SubmitOrderProcessCode string `json:"submitOrderProcessCode,omitempty"`
}

// Validate validates this base store ws d t o
func (m *BaseStoreWsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultDeliveryOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryCountries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryModes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePointsOfService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseStoreWsDTO) validateCurrencies(formats strfmt.Registry) error {

	if swag.IsZero(m.Currencies) { // not required
		return nil
	}

	for i := 0; i < len(m.Currencies); i++ {
		if swag.IsZero(m.Currencies[i]) { // not required
			continue
		}

		if m.Currencies[i] != nil {
			if err := m.Currencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("currencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BaseStoreWsDTO) validateDefaultCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultCurrency) { // not required
		return nil
	}

	if m.DefaultCurrency != nil {
		if err := m.DefaultCurrency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultCurrency")
			}
			return err
		}
	}

	return nil
}

func (m *BaseStoreWsDTO) validateDefaultDeliveryOrigin(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultDeliveryOrigin) { // not required
		return nil
	}

	if m.DefaultDeliveryOrigin != nil {
		if err := m.DefaultDeliveryOrigin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultDeliveryOrigin")
			}
			return err
		}
	}

	return nil
}

func (m *BaseStoreWsDTO) validateDefaultLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultLanguage) { // not required
		return nil
	}

	if m.DefaultLanguage != nil {
		if err := m.DefaultLanguage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultLanguage")
			}
			return err
		}
	}

	return nil
}

func (m *BaseStoreWsDTO) validateDeliveryCountries(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryCountries) { // not required
		return nil
	}

	for i := 0; i < len(m.DeliveryCountries); i++ {
		if swag.IsZero(m.DeliveryCountries[i]) { // not required
			continue
		}

		if m.DeliveryCountries[i] != nil {
			if err := m.DeliveryCountries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deliveryCountries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BaseStoreWsDTO) validateDeliveryModes(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryModes) { // not required
		return nil
	}

	if m.DeliveryModes != nil {
		if err := m.DeliveryModes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryModes")
			}
			return err
		}
	}

	return nil
}

func (m *BaseStoreWsDTO) validateLanguages(formats strfmt.Registry) error {

	if swag.IsZero(m.Languages) { // not required
		return nil
	}

	for i := 0; i < len(m.Languages); i++ {
		if swag.IsZero(m.Languages[i]) { // not required
			continue
		}

		if m.Languages[i] != nil {
			if err := m.Languages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("languages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BaseStoreWsDTO) validatePointsOfService(formats strfmt.Registry) error {

	if swag.IsZero(m.PointsOfService) { // not required
		return nil
	}

	for i := 0; i < len(m.PointsOfService); i++ {
		if swag.IsZero(m.PointsOfService[i]) { // not required
			continue
		}

		if m.PointsOfService[i] != nil {
			if err := m.PointsOfService[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pointsOfService" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseStoreWsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseStoreWsDTO) UnmarshalBinary(b []byte) error {
	var res BaseStoreWsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
