// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AddressWsDTO address ws d t o
// swagger:model AddressWsDTO
type AddressWsDTO struct {

	// company name
	CompanyName string `json:"companyName,omitempty"`

	// country
	Country *CountryWsDTO `json:"country,omitempty"`

	// default address
	DefaultAddress bool `json:"defaultAddress,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// formatted address
	FormattedAddress string `json:"formattedAddress,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// line1
	Line1 string `json:"line1,omitempty"`

	// line2
	Line2 string `json:"line2,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// postal code
	PostalCode string `json:"postalCode,omitempty"`

	// region
	Region *RegionWsDTO `json:"region,omitempty"`

	// shipping address
	ShippingAddress bool `json:"shippingAddress,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// title code
	TitleCode string `json:"titleCode,omitempty"`

	// town
	Town string `json:"town,omitempty"`

	// visible in address book
	VisibleInAddressBook bool `json:"visibleInAddressBook,omitempty"`
}

// Validate validates this address ws d t o
func (m *AddressWsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressWsDTO) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if m.Country != nil {
		if err := m.Country.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country")
			}
			return err
		}
	}

	return nil
}

func (m *AddressWsDTO) validateRegion(formats strfmt.Registry) error {

	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddressWsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressWsDTO) UnmarshalBinary(b []byte) error {
	var res AddressWsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
