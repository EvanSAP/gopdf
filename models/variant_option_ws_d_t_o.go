// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VariantOptionWsDTO variant option ws d t o
// swagger:model VariantOptionWsDTO
type VariantOptionWsDTO struct {

	// code
	Code string `json:"code,omitempty"`

	// price data
	PriceData *PriceWsDTO `json:"priceData,omitempty"`

	// stock
	Stock *StockWsDTO `json:"stock,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// variant option qualifiers
	VariantOptionQualifiers []*VariantOptionQualifierWsDTO `json:"variantOptionQualifiers"`
}

// Validate validates this variant option ws d t o
func (m *VariantOptionWsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePriceData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariantOptionQualifiers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VariantOptionWsDTO) validatePriceData(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceData) { // not required
		return nil
	}

	if m.PriceData != nil {
		if err := m.PriceData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priceData")
			}
			return err
		}
	}

	return nil
}

func (m *VariantOptionWsDTO) validateStock(formats strfmt.Registry) error {

	if swag.IsZero(m.Stock) { // not required
		return nil
	}

	if m.Stock != nil {
		if err := m.Stock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stock")
			}
			return err
		}
	}

	return nil
}

func (m *VariantOptionWsDTO) validateVariantOptionQualifiers(formats strfmt.Registry) error {

	if swag.IsZero(m.VariantOptionQualifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.VariantOptionQualifiers); i++ {
		if swag.IsZero(m.VariantOptionQualifiers[i]) { // not required
			continue
		}

		if m.VariantOptionQualifiers[i] != nil {
			if err := m.VariantOptionQualifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variantOptionQualifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VariantOptionWsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VariantOptionWsDTO) UnmarshalBinary(b []byte) error {
	var res VariantOptionWsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
